export function PaiPan() {
    /**
     * 標準時間發出地經度(角度表示,東經為正西經為負),北京時間的經度為+120度0分
     */
    this.J = 120;
    /**
     * 默認緯度(角度表示,北緯為正南緯為負),這里是中國標準時間發出地(陜西省渭南市蒲城縣)
     */
    this.W = 35;
    /**
     * 緩存每年的節氣計算結果Jie Qi
     */
    this.JQ = [];
    /**
     * 緩存農歷相關的計算結果Month code月代碼
     */
    this.MC = [];
    /**
     * 緩存synodic month朔望月
     */
    this.SM = [];
    /**
     * 四柱是否區分"早晚子"時,true則23:00-24:00算成上一日柱
     */
    this.zwz = true;
    /**
     * 是否采用精確法"排大運",用於起運處,粗略法一年按360天算,精確法按回歸年算
     */
    this.pdy = false;
    /**
     * 均值朔望月長 synodic month (new Moon to new Moon)
     */
    this.synmonth = 29.530588853;
    /**
     * 回歸年長 Tropical year
     */
    this.ty = 365.24244475;
    /**
     * 星期 week day
     */
    this.wkd = ["日", "一", "二", "三", "四", "五", "六"];
    /**
     * 六十甲子
     */
    this.gz = [
        "甲子",
        "乙醜",
        "丙寅",
        "丁卯",
        "戊辰",
        "己巳",
        "庚午",
        "辛未",
        "壬申",
        "癸酉",
        "甲戌",
        "乙亥",
        "丙子",
        "丁醜",
        "戊寅",
        "己卯",
        "庚辰",
        "辛巳",
        "壬午",
        "癸未",
        "甲申",
        "乙酉",
        "丙戌",
        "丁亥",
        "戊子",
        "己醜",
        "庚寅",
        "辛卯",
        "壬辰",
        "癸巳",
        "甲午",
        "乙未",
        "丙申",
        "丁酉",
        "戊戌",
        "己亥",
        "庚子",
        "辛醜",
        "壬寅",
        "癸卯",
        "甲辰",
        "乙巳",
        "丙午",
        "丁未",
        "戊申",
        "己酉",
        "庚戌",
        "辛亥",
        "壬子",
        "癸醜",
        "甲寅",
        "乙卯",
        "丙辰",
        "丁巳",
        "戊午",
        "己未",
        "庚申",
        "辛酉",
        "壬戌",
        "癸亥",
    ];
    /**
     * 十天幹 char of TianGan
     */
    this.ctg = ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"];
    /**
     * 十二地支 char of DiZhi
     */
    this.cdz = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"];
    /**
     * 十二生肖 char of symbolic animals ShengXiao
     */
    this.csx = ["鼠", "牛", "虎", "兔", "龍", "蛇", "馬", "羊", "猴", "雞", "狗", "豬"];
    /**
     * 廿四節氣(從春分開始) JieQi
     */
    this.jq = [
        "春分",
        "清明",
        "谷雨",
        "立夏",
        "小滿",
        "芒種",
        "夏至",
        "小暑",
        "大暑",
        "立秋",
        "處暑",
        "白露",
        "秋分",
        "寒露",
        "霜降",
        "立冬",
        "小雪",
        "大雪",
        "冬至",
        "小寒",
        "大寒",
        "立春",
        "雨水",
        "驚蟄",
    ];
    /**
     * 大寫月份
     */
    this.dxy = ["正月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "冬月", "臘月"];
    /**
     * 大寫日期
     */
    this.dxd = [
        "初一",
        "初二",
        "初三",
        "初四",
        "初五",
        "初六",
        "初七",
        "初八",
        "初九",
        "初十",
        "十一",
        "十二",
        "十三",
        "十四",
        "十五",
        "十六",
        "十七",
        "十八",
        "十九",
        "二十",
        "廿一",
        "廿二",
        "廿三",
        "廿四",
        "廿五",
        "廿六",
        "廿七",
        "廿八",
        "廿九",
        "三十",
    ];
    /**
     * 大寫數字
     */
    this.dxs = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
    /**
     * 五行 char of WuXing
     */
    this.cwx = ["金", "水", "木", "火", "土"];
    /**
     * 性別 XingBie
     */
    this.xb = ["男", "女"];
    /**
     * 命造 mingzao
     */
    this.mz = ["乾", "坤"];
    /**
     * 陰陽 char of YingYang
     */
    this.cyy = ["陽", "陰"];
    /**
     * 類型
     */
    this.lx = ["印綬", "比劫", "食傷", "才財", "官殺"];
    /**
     * 天幹的五行屬性,01234分別代表:金水木火土
     */
    this.wxtg = [2, 2, 3, 3, 4, 4, 0, 0, 1, 1];
    /**
     * 地支的五行屬性,01234分別代表:金水木火土
     */
    this.wxdz = [1, 4, 2, 2, 4, 3, 3, 4, 0, 0, 4, 1];
    /**
     * 十神全稱
     */
    this.ssq = ["正印", "偏印", "比肩", "劫財", "傷官", "食神", "正財", "偏財", "正官", "偏官"];
    /**
     * 十神縮寫
     */
    this.sss = ["印", "卩", "比", "劫", "傷", "食", "財", "才", "官", "殺"];
    /**
     * 日幹關聯其餘各幹對應十神 Day Gan ShiShen
     */
    this.dgs = [
        [2, 3, 1, 0, 9, 8, 7, 6, 5, 4],
        [3, 2, 0, 1, 8, 9, 6, 7, 4, 5],
        [5, 4, 2, 3, 1, 0, 9, 8, 7, 6],
        [4, 5, 3, 2, 0, 1, 8, 9, 6, 7],
        [7, 6, 5, 4, 2, 3, 1, 0, 9, 8],
        [6, 7, 4, 5, 3, 2, 0, 1, 8, 9],
        [9, 8, 7, 6, 5, 4, 2, 3, 1, 0],
        [8, 9, 6, 7, 4, 5, 3, 2, 0, 1],
        [1, 0, 9, 8, 7, 6, 5, 4, 2, 3],
        [0, 1, 8, 9, 6, 7, 4, 5, 3, 2],
    ];
    /**
     * 日幹關聯各支對應十神 Day Zhi ShiShen
     */
    this.dzs = [
        [0, 1, 8, 9, 6, 7, 4, 5, 3, 2],
        [6, 7, 4, 5, 3, 2, 0, 1, 8, 9],
        [2, 3, 1, 0, 9, 8, 7, 6, 5, 4],
        [3, 2, 0, 1, 8, 9, 6, 7, 4, 5],
        [7, 6, 5, 4, 2, 3, 1, 0, 9, 8],
        [5, 4, 2, 3, 1, 0, 9, 8, 7, 6],
        [4, 5, 3, 2, 0, 1, 8, 9, 6, 7],
        [6, 7, 4, 5, 3, 2, 0, 1, 8, 9],
        [9, 8, 7, 6, 5, 4, 2, 3, 1, 0],
        [8, 9, 6, 7, 4, 5, 3, 2, 0, 1],
        [7, 6, 5, 4, 2, 3, 1, 0, 9, 8],
        [1, 0, 9, 8, 7, 6, 5, 4, 2, 3],
    ];
    /**
     * 十二星座 char of XingZuo
     */
    this.cxz = ["摩羯", "水瓶", "雙魚", "白羊", "金牛", "雙子", "巨蟹", "獅子", "處女", "天秤", "天蠍", "射手"];
    /**
     * 地支藏幹表 支藏幹
     */
    this.zcg = [
        [9, -1, -1],
        [5, 9, 7],
        [0, 2, 4],
        [1, -1, -1],
        [4, 1, 9],
        [2, 4, 6],
        [3, 5, -1],
        [5, 1, 3],
        [6, 8, 4],
        [7, -1, -1],
        [4, 7, 3],
        [8, 0, -1],
    ];
    /**
     * 十二長生 char of ZhangSheng
     */
    this.czs = ["長生(強)", "沐浴(凶)", "冠帶(吉)", "臨官(大吉)", "帝旺(大吉)", "衰(弱)", "病(弱)", "死(凶)", "墓(吉)", "絕(凶)", "胎(平)", "養(平)"];
    this.yyss = ["異", "同"];
    this.sxss = ["生我", "同我", "我生", "我克", "克我"];
    /**
     * 方位 char of FangWei
     */
    this.cfw = ["　中　", "　北　", "北北東", "東北東", "　東　", "東南東", "南南東", "　南　", "南南西", "西南西", "　西　", "西北西", "北北西"];
    /**
     * 四季 char of SiJi
     */
    this.csj = ["旺四季", "　春　", "　夏　", "　秋　", "　冬　"];
    /**
     * 天幹的方位屬性 FangWei TianGan
     */
    this.fwtg = [4, 4, 7, 7, 0, 0, 10, 10, 1, 1];
    /**
     * 地支的方位屬性 FangWei DiZhi
     */
    this.fwdz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    /**
     * 天幹的四季屬性 SiJi TianGan
     */
    this.sjtg = [1, 1, 2, 2, 0, 0, 3, 3, 4, 4];
    /**
     * 地支的四季屬性 SiJi DiZhi
     */
    this.sjdz = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 1];
    /**
     * 節氣修覆 XiuFu 使農歷-720年至2300年與壽星萬年歷匹配,鍵分別為公歷年份和該年自春分開始的廿四節氣
     */
    this.jqXFu = {
        "-680": {9: -1},
        "-643": {14: -1},
        "-638": {1: -1},
        "-567": {20: -1},
        "-557": {17: -1},
        "-545": {10: -1},
        "-523": {18: -1},
        "-512": {10: -1},
        "-492": {2: -1},
        "-479": {10: -1},
        "-446": {10: -1},
        "-322": {0: -1},
        1646: {1: -1, 9: 1, 22: -1, 23: -1},
        1647: {0: -1},
        1650: {1: -1, 9: 1, 11: 1, 22: -1},
        1651: {0: -1, 3: -1},
        1652: {11: -1},
        1653: {2: -1},
        1654: {0: -1, 1: -1, 11: 1, 17: -1},
        1655: {0: -1, 3: -1, 20: 1},
        1656: {10: 1, 13: 1},
        1657: {2: -1, 8: 1, 20: -1},
        1658: {5: -1, 11: 1, 21: -1},
        1659: {3: -1, 6: -1},
        1660: {7: 1, 10: 1, 13: 1, 15: 1},
        1661: {2: -1, 12: 1, 20: -1},
        1662: {5: -1, 11: 1, 21: -1},
        1663: {3: -1, 23: -1},
        1664: {10: 1, 13: 1, 15: 1, 19: -1},
        1665: {2: -1, 4: -1, 12: 1, 20: -1},
        1666: {21: -1},
        1667: {22: -1, 23: -1},
        1668: {14: 1, 19: -1},
        1669: {4: -1, 12: 1},
        1670: {21: -1},
        1671: {1: -1, 18: -1, 22: -1, 23: -1},
        1672: {0: -1, 14: 1},
        1673: {12: 1, 16: 1},
        1675: {1: -1, 9: 1, 22: -1, 23: -1},
        1676: {0: -1, 14: 1},
        1677: {16: 1},
        1678: {4: -1},
        1679: {1: -1, 4: -1, 9: 1, 22: -1, 23: -1},
        1680: {0: -1, 3: -1},
        1682: {2: -1},
        1683: {1: -1, 11: 1, 22: -1},
        1684: {0: -1, 3: -1},
        1685: {10: 1},
        1686: {2: -1, 8: 1},
        1687: {1: -1, 5: -1, 11: 1},
        1688: {0: -1, 3: -1, 6: -1},
        1689: {10: 1, 13: 1},
        1690: {2: -1, 20: -1},
        1691: {5: -1, 11: 1, 21: -1},
        1692: {3: -1, 21: 1},
        1693: {10: 1, 13: 1, 15: 1},
        1694: {2: -1, 4: -1, 12: 1, 20: -1},
        1695: {21: -1},
        1696: {23: -1},
        1697: {13: 1, 15: 1, 19: -1},
        1698: {2: -1, 4: -1, 12: 1, 20: -1},
        1699: {21: -1},
        1700: {1: -1, 23: -1},
        1701: {15: 1, 19: -1},
        1702: {4: -1, 12: 1, 20: -1},
        1703: {21: -1},
        1704: {1: -1, 9: 1, 22: -1, 23: -1},
        1705: {0: -1, 14: 1},
        1708: {1: -1, 9: 1, 18: -1, 22: -1, 23: -1},
        1709: {0: -1},
        1710: {16: 1},
        1712: {1: -1, 11: 1, 22: -1, 23: -1},
        1713: {0: -1, 3: -1},
        1714: {10: 1},
        1715: {2: -1, 8: 1},
        1716: {1: -1, 5: -1, 11: 1, 22: -1},
        1717: {0: -1, 3: -1, 6: -1},
        1718: {10: 1},
        1719: {2: -1},
        1720: {5: -1, 11: 1},
        1721: {0: -1, 3: -1},
        1722: {10: 1, 13: 1},
        1723: {2: -1, 4: -1},
        1724: {21: -1},
        1725: {3: -1},
        1726: {13: 1, 15: 1},
        1727: {2: -1, 4: -1, 12: 1, 20: -1},
        1728: {21: -1},
        1729: {23: -1},
        1730: {13: 1, 14: 1, 15: 1},
        1731: {4: -1, 12: 1, 20: -1},
        1732: {21: -1},
        1733: {1: -1},
        1735: {20: -1},
        1738: {19: -1},
        1740: {21: -1},
        1744: {8: -1},
        1745: {23: -1},
        1747: {7: -1},
        1749: {1: -1},
        1751: {13: 1},
        1753: {5: -1, 22: -1},
        1756: {12: 1},
        1760: {2: -1},
        1773: {21: -1},
        1774: {11: 1},
        1776: {16: 1},
        1778: {23: -1},
        1779: {6: -1},
        1781: {17: 1},
        1782: {1: -1},
        1784: {13: 1},
        1786: {22: -1},
        1806: {21: -1},
        1808: {19: -1},
        1809: {16: 1},
        1811: {23: -1},
        1815: {1: -1},
        1817: {13: 1},
        1819: {22: -1},
        1824: {9: 1},
        1826: {4: -1},
        1829: {15: 1},
        1836: {11: 1},
        1844: {5: 1},
        1846: {16: 1},
        1848: {18: 1},
        1849: {3: -1},
        1850: {13: 1},
        1851: {12: 1, 17: 1},
        1855: {2: -1},
        1862: {14: 1, 15: 1},
        1864: {8: 1},
        1866: {14: 1},
        1867: {7: 1, 10: 1},
        1878: {19: 1},
        1879: {16: 1},
        1883: {13: 1},
        1884: {12: 1, 17: 1},
        1886: {9: 1},
        1895: {14: 1, 15: 1},
        1898: {11: 1},
        1899: {6: 1, 14: 1},
        1912: {16: 1},
        1913: {12: 1},
        1917: {17: -1},
        1922: {22: -1},
        1927: {11: -1},
        1928: {6: -1},
        1951: {18: 1},
        1978: {20: -1},
        2295: {5: 1},
    };
    /**
     * 朔望月moon修覆 XiuFu 使農歷-720年至2300年與壽星萬年歷匹配,鍵分別為公歷年份和該年第幾個朔望日
     */
    this.smXFu = {
        618: {13: -1},
        620: {13: -1},
        626: {5: 1},
        627: {12: -1},
        628: {9: -1, 12: -1},
        629: {6: 1},
        634: {4: 1},
        635: {4: 1},
        636: {5: 1},
        637: {6: 1, 9: 1},
        639: {10: -1},
        640: {12: 1},
        642: {3: 1},
        643: {3: 1},
        644: {1: 1, 4: 1},
        645: {3: -1, 8: 1, 9: 1, 11: 1},
        646: {1: -1, 3: -1, 5: -1, 8: 1, 10: 1},
        647: {4: -1, 9: 1, 11: 1},
        648: {4: -1, 5: -1, 10: 1, 12: 1},
        649: {4: -1, 6: -1, 12: 1},
        650: {2: 1, 7: -1, 9: -1, 11: -1},
        651: {2: 1, 4: 1, 11: -1},
        652: {1: -1, 5: 1, 7: 1, 12: -1},
        653: {2: -1, 8: 1, 10: 1, 13: -1},
        654: {2: -1, 7: 1, 9: 1},
        655: {3: -1, 5: -1, 8: 1, 10: 1},
        656: {3: -1, 4: -1, 9: 1, 11: 1, 13: 1},
        657: {3: -1, 5: -1, 9: 1, 11: 1},
        658: {1: 1, 6: -1, 8: -1, 10: -1, 12: 1},
        659: {1: 1, 3: 1, 8: -1, 10: -1},
        660: {4: 1, 6: 1, 11: -1},
        661: {1: -1, 7: 1, 9: 1, 12: -1},
        662: {1: -1, 6: 1, 8: 1},
        663: {2: -1, 7: 1, 9: 1},
        664: {2: -1, 3: -1, 8: 1, 10: 1, 12: 1},
        665: {2: -1, 4: -1, 8: 1, 10: 1, 12: 1},
        666: {3: 1},
        667: {5: 1},
        672: {4: 1},
        680: {1: -1},
        682: {10: -1},
        683: {1: -1, 11: -1},
        684: {1: 1},
        687: {6: 1},
        690: {12: -1},
        697: {11: 1, 12: 1},
        698: {8: 1},
        704: {5: 1},
        706: {10: 1},
        708: {10: 1},
        709: {2: 1, 9: 1},
        710: {2: 1, 5: 1, 7: 1, 10: 1, 12: 1},
        712: {2: 1, 7: 1},
        713: {1: 1, 5: 1, 7: 1},
        714: {3: 1},
        715: {4: 1, 7: 1},
        716: {4: 1, 7: 1, 9: 1},
        717: {1: 1},
        718: {9: 1, 13: 1},
        719: {1: 1},
        721: {7: 1},
        722: {6: 1, 9: 1},
        723: {3: 1, 9: 1, 12: 1},
        724: {8: 1, 12: 1},
        725: {4: 1, 7: 1, 12: 1},
        726: {5: 1, 12: 1},
        727: {5: 1, 8: 1, 12: 1},
        729: {3: 1, 8: -1},
        732: {6: 1, 8: 1},
        733: {3: 1, 6: 1},
        736: {2: -1},
        737: {2: -1, 9: 1},
        738: {7: 1, 9: 1},
        741: {2: 1, 5: 1, 7: 1, 10: 1},
        742: {1: 1, 3: 1, 6: 1, 10: 1},
        743: {3: 1, 6: 1},
        744: {4: 1, 7: 1, 10: 1},
        745: {8: 1, 11: 1},
        746: {4: 1, 8: 1},
        747: {4: 1},
        748: {7: 1},
        749: {4: 1, 6: 1},
        750: {5: 1, 9: 1},
        751: {1: 1, 3: 1, 6: 1},
        752: {9: 1, 12: 1},
        753: {10: 1},
        754: {10: 1},
        755: {3: -1},
        757: {3: 1, 8: 1},
        758: {4: 1, 6: 1, 12: 1},
        759: {2: 1, 5: 1, 12: 1},
        760: {2: 1, 5: 1, 8: 1, 11: 1},
        761: {6: 1, 9: 1, 12: 1},
        762: {6: 1, 9: 1, 11: 1},
        763: {7: 1, 10: 1, 12: 1},
        764: {3: 1, 13: 1},
        765: {5: 1},
        766: {3: 1, 5: 1},
        767: {4: 1, 11: 1},
        768: {4: 1, 7: 1, 10: 1},
        769: {5: 1, 10: 1},
        770: {6: 1, 9: 1},
        772: {2: 1, 10: 1},
        773: {1: 1, 10: 1, 12: 1},
        774: {7: 1},
        775: {1: 1, 3: 1, 7: 1, 10: 1},
        777: {4: 1, 7: 1},
        778: {5: 1, 8: 1, 10: 1},
        779: {5: 1, 10: 1},
        780: {1: 1, 2: 1, 13: 1},
        782: {1: 1, 10: 1},
        783: {4: 1, 9: 1, 11: 1, 13: 1},
        785: {12: 1},
        787: {4: 1, 12: 1},
        788: {12: 1},
        790: {3: 1},
        791: {3: 1, 10: 1},
        792: {5: 1, 10: 1, 12: 1},
        793: {11: 1},
        794: {1: 1, 6: 1, 8: 1},
        795: {3: 1, 6: 1},
        796: {4: 1},
        799: {2: 1},
        802: {5: 1, 13: 1},
        804: {1: 1},
        806: {10: 1},
        807: {1: 1, 11: 1},
        808: {5: 1, 7: 1, 9: 1},
        809: {4: 1},
        810: {7: 1, 12: 1},
        811: {4: 1, 6: 1, 9: 1, 12: 1},
        812: {2: 1, 9: 1},
        813: {1: 1, 3: 1},
        814: {3: 1, 9: 1, 12: 1},
        815: {1: 1, 7: 1, 10: 1},
        816: {1: 1, 8: 1, 11: 1, 13: 1},
        817: {6: 1},
        818: {1: 1},
        819: {3: 1, 8: 1},
        820: {4: 1, 6: 1, 8: 1},
        821: {5: 1, 12: 1},
        822: {2: 1, 5: 1, 8: 1, 11: 1},
        823: {6: 1, 9: 1, 11: 1},
        824: {7: 1, 12: 1},
        825: {3: 1, 5: 1, 7: 1, 10: 1, 12: 1},
        826: {3: 1, 6: 1, 11: 1},
        827: {1: 1, 3: 1, 6: 1},
        828: {1: 1, 3: 1, 5: 1, 8: 1},
        829: {4: 1, 8: 1, 11: 1},
        830: {4: 1, 7: 1, 10: 1},
        831: {5: 1, 8: 1, 10: 1},
        832: {6: 1, 9: 1, 11: 1},
        833: {2: 1, 6: 1},
        834: {2: 1, 5: 1, 10: 1},
        835: {2: 1, 5: 1, 11: 1, 13: 1},
        836: {2: 1},
        837: {1: 1, 3: 1, 5: 1, 7: 1, 10: 1},
        838: {3: 1, 9: 1},
        839: {4: 1, 7: 1, 9: 1},
        840: {5: 1, 8: 1, 10: 1},
        841: {1: 1, 5: 1},
        842: {1: 1, 4: 1, 6: 1},
        843: {10: 1},
        844: {1: 1, 4: 1, 10: 1},
        845: {2: 1, 4: 1, 9: 1, 11: 1},
        846: {1: 1, 7: 1, 12: 1},
        847: {3: 1, 6: 1, 9: 1, 12: 1},
        848: {4: 1, 7: 1, 9: 1, 13: 1},
        849: {4: 1, 12: 1},
        850: {3: 1, 5: 1, 12: 1},
        851: {4: 1, 6: 1},
        852: {3: 1},
        853: {3: 1, 6: 1, 8: 1, 10: 1},
        854: {6: 1, 11: 1, 13: 1},
        855: {8: 1, 11: 1},
        856: {1: 1, 6: 1, 8: 1},
        857: {3: 1, 6: 1, 11: 1},
        858: {2: 1, 4: 1, 7: 1, 11: 1},
        859: {3: 1, 5: 1},
        860: {2: 1, 8: 1},
        861: {2: 1, 9: 1},
        862: {3: 1, 8: 1, 10: 1},
        863: {5: 1, 7: 1, 12: 1},
        864: {5: 1},
        865: {1: 1, 6: 1, 8: 1, 11: 1},
        866: {1: 1, 3: 1, 10: 1},
        867: {2: 1, 4: 1, 10: 1},
        868: {4: 1, 10: 1},
        869: {1: 1, 8: 1, 11: 1},
        870: {2: 1, 5: 1, 7: 1, 9: 1},
        871: {4: 1},
        872: {7: 1},
        873: {5: 1, 7: 1, 10: 1, 13: 1},
        874: {5: 1, 9: 1},
        875: {3: 1, 6: 1, 9: 1},
        876: {3: 1, 9: 1, 12: 1},
        877: {7: 1, 10: 1},
        878: {4: 1, 8: 1, 11: 1, 13: 1},
        879: {3: 1, 6: 1, 11: 1},
        880: {1: 1, 6: 1},
        881: {2: 1, 4: 1, 9: 1},
        882: {4: 1, 6: 1, 8: 1},
        883: {5: 1, 12: 1},
        884: {6: 1, 9: 1, 12: 1},
        885: {6: 1, 9: 1, 11: 1},
        886: {7: 1, 10: 1, 12: 1},
        887: {3: 1, 5: 1, 10: 1, 12: 1},
        888: {3: 1, 11: 1},
        889: {1: 1, 3: 1, 6: 1},
        890: {1: 1, 3: 1, 5: 1},
        891: {4: 1, 11: 1},
        892: {8: 1, 11: 1},
        893: {5: 1, 8: 1, 10: 1},
        894: {11: 1},
        895: {2: 1, 6: 1},
        896: {2: 1, 5: 1, 10: 1},
        897: {2: 1, 5: 1, 11: 1, 13: 1},
        898: {2: 1, 4: 1, 7: 1},
        899: {1: 1, 5: 1, 7: 1, 10: 1},
        900: {2: 1, 10: 1},
        901: {4: 1, 7: 1, 9: 1},
        902: {5: 1, 10: 1},
        903: {2: 1, 6: 1},
        904: {1: 1, 4: 1, 6: 1},
        905: {1: 1, 10: 1},
        906: {1: 1, 8: 1, 10: 1},
        907: {4: 1, 9: 1, 11: 1},
        908: {1: 1, 12: 1},
        909: {1: 1, 6: 1, 12: 1},
        910: {4: 1, 7: 1, 9: 1},
        911: {1: 1, 5: 1, 13: 1},
        912: {3: 1, 5: 1, 12: 1},
        913: {4: 1},
        914: {3: 1, 9: 1},
        915: {3: 1, 6: 1, 8: 1, 10: 1},
        916: {6: 1, 11: 1, 13: 1},
        917: {8: 1, 11: 1},
        918: {1: 1, 6: 1, 8: 1},
        919: {2: 1, 4: 1, 12: 1},
        920: {2: 1, 4: 1, 11: 1},
        921: {3: 1, 5: 1, 11: 1},
        922: {3: 1, 12: 1},
        923: {2: 1, 5: 1, 7: 1},
        924: {8: 1, 10: 1},
        925: {7: 1, 12: 1},
        926: {5: 1, 7: 1},
        927: {1: 1, 6: 1, 8: 1, 11: 1},
        928: {1: 1, 3: 1, 10: 1},
        929: {2: 1, 4: 1, 10: 1},
        930: {2: 1, 11: 1},
        931: {1: 1, 11: 1},
        932: {5: 1, 7: 1, 12: 1},
        933: {4: 1},
        934: {2: 1, 4: 1, 7: 1},
        935: {5: 1, 7: 1, 10: 1, 13: 1},
        936: {5: 1, 9: 1},
        937: {2: -1, 9: 1},
        938: {2: -1, 3: -1, 8: 1, 10: 1, 13: 1},
        939: {10: 1, 12: 1},
        940: {4: 1, 6: 1, 11: 1, 13: 1},
        941: {3: 1, 6: 1, 11: 1},
        942: {1: 1, 6: 1},
        943: {2: 1, 4: 1, 6: 1, 9: 1},
        944: {2: 1, 4: 1, 8: 1},
        945: {8: 1, 12: 1},
        946: {7: 1, 9: 1, 12: 1},
        947: {7: 1, 11: 1},
        948: {12: 1},
        949: {6: 1, 13: 1},
        950: {11: 1},
        951: {1: 1, 3: 1, 6: 1, 8: 1},
        952: {1: 1, 3: 1, 5: 1},
        953: {2: 1, 11: 1},
        954: {8: 1, 11: 1},
        955: {6: 1, 8: 1, 10: 1},
        956: {7: 1, 11: 1},
        957: {3: 1, 5: 1},
        958: {2: 1, 10: 1},
        959: {2: 1, 5: 1, 11: 1},
        960: {1: 1, 3: 1, 5: 1, 8: 1, 10: 1, 12: 1},
        961: {1: 1, 3: 1, 7: 1, 10: 1},
        962: {2: 1, 7: 1, 10: 1},
        963: {7: 1, 9: 1},
        964: {1: 1, 5: 1, 10: 1},
        965: {2: 1, 6: 1},
        966: {1: 1, 4: 1},
        967: {1: 1},
        968: {2: 1, 7: 1, 9: 1, 11: 1},
        969: {4: 1, 9: 1, 11: 1},
        970: {1: 1, 12: 1},
        971: {1: 1, 6: 1, 12: 1},
        972: {2: 1, 9: 1},
        973: {1: 1, 3: 1, 5: 1, 13: 1},
        974: {3: 1, 12: 1},
        976: {4: 1, 8: 1},
        977: {3: 1, 6: 1, 8: 1, 10: 1},
        978: {6: 1, 11: 1},
        979: {1: 1, 6: 1, 9: 1, 12: 1},
        980: {1: 1, 6: 1, 8: 1},
        981: {2: 1, 12: 1},
        982: {2: 1, 8: 1, 11: 1},
        983: {3: 1, 9: 1, 11: 1},
        984: {3: 1, 7: 1, 12: 1},
        985: {2: 1, 5: 1, 7: 1},
        986: {3: 1, 5: 1, 8: 1},
        987: {8: 1},
        988: {5: 1, 7: 1},
        989: {1: 1, 11: 1},
        990: {1: 1, 10: 1},
        991: {2: 1, 8: 1, 10: 1},
        992: {2: 1, 9: 1, 11: 1},
        993: {1: 1, 6: 1, 11: 1},
        994: {2: 1, 7: 1, 12: 1},
        995: {2: 1, 5: 1},
        996: {2: 1, 4: 1},
        997: {3: 1, 5: 1, 7: 1, 10: 1},
        998: {1: 1, 10: 1},
        999: {7: 1, 9: 1},
        1000: {1: 1, 8: 1, 10: 1, 13: 1},
        1001: {1: 1, 8: 1, 10: 1, 12: 1},
        1002: {1: 1, 4: 1, 6: 1, 11: 1},
        1003: {1: 1, 4: 1, 12: 1},
        1004: {1: 1, 6: 1},
        1005: {2: 1, 4: 1, 6: 1, 9: 1},
        1006: {3: 1, 9: 1},
        1007: {8: 1, 12: 1},
        1008: {7: 1, 9: 1, 12: 1},
        1009: {7: 1, 11: 1},
        1010: {3: 1, 5: 1, 8: 1, 12: 1},
        1011: {6: 1, 13: 1},
        1012: {11: 1},
        1013: {1: 1, 3: 1, 8: 1, 12: 1},
        1014: {2: 1, 6: 1, 11: 1},
        1015: {2: 1, 11: 1},
        1016: {3: 1, 6: 1, 8: 1, 11: 1},
        1017: {6: 1, 10: 1},
        1018: {2: 1, 7: 1, 11: 1},
        1019: {3: 1, 5: 1, 8: 1},
        1020: {2: 1, 8: 1},
        1021: {2: 1, 5: 1, 9: 1, 11: 1},
        1022: {1: 1, 5: 1, 8: 1, 10: 1, 12: 1},
        1023: {1: 1, 7: 1, 10: 1, 12: 1},
        1024: {2: 1, 7: 1, 10: 1},
        1025: {1: -1, 3: 1, 6: 1, 10: 1},
        1026: {1: 1, 3: 1, 6: 1},
        1027: {4: 1, 7: 1},
        1028: {1: 1, 4: 1, 7: 1},
        1029: {1: 1, 8: 1},
        1030: {7: 1, 9: 1, 11: 1},
        1031: {4: 1, 6: 1, 9: 1, 11: 1},
        1032: {1: 1, 9: 1, 12: 1},
        1033: {2: 1, 5: 1, 9: 1, 13: 1},
        1034: {2: 1, 5: 1, 9: 1},
        1035: {1: 1, 3: 1, 6: 1},
        1036: {1: 1, 4: 1, 7: 1, 10: 1, 13: 1},
        1037: {7: 1},
        1038: {4: 1, 8: 1},
        1039: {3: 1, 8: 1, 10: 1},
        1040: {11: 1},
        1041: {1: 1, 6: 1, 9: 1, 12: 1},
        1042: {1: 1, 4: 1, 8: 1},
        1043: {2: 1, 5: 1, 11: 1, 12: 1},
        1044: {3: 1, 6: 1, 9: 1},
        1045: {6: 1, 9: 1, 11: 1},
        1046: {3: 1, 7: 1, 10: 1, 12: 1},
        1047: {2: 1, 5: 1, 7: 1, 12: 1},
        1048: {5: 1},
        1049: {3: 1, 8: 1, 13: 1},
        1050: {3: 1, 5: 1, 7: 1, 10: 1},
        1051: {1: 1, 4: 1, 11: 1},
        1052: {2: 1, 5: 1, 8: 1, 11: 1},
        1053: {5: 1, 8: 1, 10: 1},
        1054: {2: 1, 6: 1, 9: 1, 11: 1},
        1055: {2: 1, 7: 1, 10: 1, 12: 1},
        1056: {12: 1},
        1057: {2: 1, 5: 1},
        1058: {2: 1, 4: 1},
        1059: {3: 1, 5: 1, 10: 1},
        1060: {1: 1, 4: 1, 10: 1},
        1061: {4: 1, 7: 1, 9: 1},
        1062: {1: 1, 5: 1, 8: 1, 10: 1},
        1063: {1: 1, 6: 1, 9: 1, 13: 1},
        1064: {4: 1, 6: 1, 9: 1},
        1065: {1: 1, 4: 1, 12: 1},
        1066: {1: 1, 3: 1, 6: 1, 12: 1},
        1067: {2: 1, 4: 1, 6: 1, 9: 1},
        1068: {3: 1, 9: 1},
        1069: {3: 1, 6: 1, 8: 1, 12: 1},
        1070: {4: 1, 7: 1, 12: 1},
        1071: {5: 1, 8: 1, 12: 1},
        1072: {3: 1, 5: 1, 8: 1, 12: 1},
        1073: {3: 1, 9: 1},
        1074: {9: 1, 11: 1},
        1075: {1: 1, 3: 1, 8: 1, 10: 1, 12: 1},
        1076: {2: 1, 6: 1, 8: 1, 11: 1},
        1077: {2: 1, 11: 1},
        1078: {3: 1, 6: 1, 8: 1, 11: 1},
        1079: {4: 1, 7: 1, 11: 1},
        1080: {2: 1, 4: 1, 7: 1},
        1081: {5: 1, 8: 1},
        1082: {3: 1, 9: 1},
        1083: {2: 1, 5: 1, 7: 1, 9: 1, 11: 1},
        1084: {5: 1, 10: 1, 12: 1},
        1085: {1: 1, 7: 1, 10: 1, 12: 1},
        1086: {2: 1, 5: 1, 7: 1, 10: 1},
        1087: {1: 1, 3: 1, 6: 1, 10: 1},
        1088: {1: 1, 3: 1, 6: 1},
        1089: {4: 1, 7: 1},
        1090: {2: 1, 5: 1, 8: 1},
        1091: {1: 1, 4: 1, 8: 1},
        1092: {4: 1, 7: 1, 9: 1},
        1093: {6: 1, 9: 1, 11: 1},
        1094: {9: 1, 12: 1},
        1095: {2: 1, 5: 1, 7: 1, 9: 1, 13: 1},
        1096: {2: 1, 5: 1},
        1097: {3: 1, 6: 1, 9: 1, 12: 1},
        1098: {1: 1, 4: 1, 7: 1, 10: 1, 13: 1},
        1099: {7: 1, 10: 1},
        1100: {4: 1, 6: 1, 8: 1},
        1101: {4: 1, 9: 1},
        1102: {6: 1},
        1103: {4: 1, 6: 1, 12: 1},
        1104: {1: 1, 4: 1, 8: 1},
        1105: {2: 1, 5: 1, 8: 1, 11: 1, 12: 1},
        1106: {3: 1, 6: 1, 9: 1},
        1107: {6: 1, 9: 1, 11: 1},
        1108: {3: 1, 7: 1, 10: 1, 12: 1},
        1109: {3: 1, 6: 1, 8: 1, 13: 1},
        1110: {5: 1},
        1111: {3: 1, 5: 1, 8: 1},
        1112: {4: 1, 6: 1, 8: 1, 11: 1},
        1113: {1: 1, 4: 1},
        1114: {2: 1, 5: 1, 8: 1},
        1115: {5: 1, 8: 1, 10: 1},
        1116: {2: 1, 6: 1, 9: 1, 11: 1},
        1117: {2: 1, 5: 1, 7: 1, 10: 1, 12: 1},
        1118: {10: 1, 12: 1},
        1119: {2: 1},
        1120: {1: 1, 3: 1, 5: 1, 10: 1},
        1121: {3: 1},
        1122: {4: 1, 7: 1, 10: 1},
        1123: {4: 1, 7: 1, 9: 1},
        1124: {1: 1, 5: 1, 8: 1},
        1125: {1: 1, 6: 1, 9: 1, 13: 1},
        1126: {4: 1, 6: 1, 9: 1},
        1127: {1: 1, 4: 1, 10: 1, 12: 1},
        1128: {2: 1, 4: 1, 7: 1, 9: 1, 13: 1},
        1129: {2: 1, 6: 1, 9: 1},
        1130: {3: 1, 9: 1},
        1131: {3: 1, 6: 1, 8: 1, 12: 1},
        1132: {4: 1, 7: 1, 12: 1},
        1133: {5: 1, 8: 1, 12: 1},
        1134: {3: 1, 5: 1, 8: 1},
        1135: {3: 1, 6: 1, 9: 1},
        1136: {3: 1, 6: 1, 10: 1, 12: 1},
        1137: {3: 1, 8: 1, 10: 1, 12: 1},
        1138: {2: 1, 8: 1, 11: 1},
        1139: {3: 1, 6: 1, 8: 1, 12: 1},
        1140: {3: 1, 6: 1, 8: 1, 11: 1},
        1141: {4: 1, 7: 1, 11: 1},
        1142: {2: 1, 4: 1, 7: 1},
        1143: {5: 1, 8: 1},
        1144: {9: 1},
        1145: {2: 1, 5: 1, 7: 1, 9: 1},
        1146: {5: 1, 10: 1, 12: 1},
        1147: {13: 1},
        1148: {2: 1, 5: 1, 7: 1, 10: 1},
        1149: {1: 1, 3: 1, 6: 1, 10: 1},
        1150: {1: 1, 3: 1, 6: 1},
        1151: {4: 1, 7: 1, 10: 1},
        1152: {1: 1, 2: 1, 8: 1, 11: 1},
        1153: {1: 1, 4: 1, 8: 1},
        1154: {4: 1, 7: 1, 9: 1},
        1155: {7: 1, 12: 1},
        1156: {4: 1, 6: 1, 9: 1, 12: 1},
        1157: {2: 1, 5: 1, 9: 1},
        1158: {1: 1, 3: 1, 6: 1},
        1159: {3: 1, 6: 1, 9: 1, 12: 1},
        1160: {1: 1, 4: 1, 7: 1, 10: 1, 13: 1},
        1161: {7: 1, 10: 1, 12: 1},
        1162: {6: 1, 8: 1},
        1163: {1: 1, 4: 1},
        1164: {3: 1},
        1165: {4: 1, 6: 1},
        1166: {2: 1, 5: 1, 12: 1},
        1167: {2: 1, 5: 1, 8: 1, 11: 1, 12: 1},
        1168: {3: 1, 6: 1, 9: 1, 11: -1},
        1169: {6: 1, 9: 1, 11: 1},
        1170: {3: 1, 7: 1, 10: 1, 12: 1},
        1171: {3: 1, 6: 1, 8: 1, 11: 1, 13: 1},
        1172: {5: 1},
        1173: {1: 1, 3: 1, 5: 1, 8: 1},
        1174: {4: 1, 8: 1, 11: 1},
        1175: {1: 1, 4: 1, 10: 1},
        1176: {5: 1, 8: 1, 10: 1},
        1177: {6: 1, 9: 1, 11: 1},
        1178: {2: 1, 6: 1, 9: 1, 11: 1},
        1179: {2: 1, 5: 1, 7: 1, 10: 1, 12: 1},
        1180: {1: 1, 10: 1, 12: 1},
        1181: {2: 1, 7: 1},
        1182: {1: 1, 3: 1, 5: 1, 7: 1, 10: 1},
        1183: {3: 1},
        1184: {4: 1, 7: 1},
        1185: {5: 1, 8: 1, 10: 1},
        1186: {1: 1, 5: 1, 8: 1},
        1187: {1: 1, 6: 1, 9: 1, 13: 1},
        1188: {4: 1, 6: 1, 9: 1},
        1189: {1: 1, 4: 1, 10: 1, 12: 1},
        1190: {2: 1, 4: 1, 7: 1, 9: 1, 11: 1, 13: 1},
        1191: {2: 1, 6: 1, 9: 1},
        1192: {3: 1, 9: 1, 12: 1},
        1193: {4: 1, 7: 1, 9: 1, 13: 1},
        1194: {4: 1, 7: 1, 12: 1},
        1195: {5: 1, 8: 1, 12: 1},
        1196: {4: 1, 6: 1, 9: 1, 13: 1},
        1197: {3: 1, 9: 1},
        1198: {3: 1, 6: 1, 10: 1},
        1199: {3: 1, 5: 1, 8: 1, 10: 1, 12: 1},
        1200: {8: 1, 11: 1},
        1201: {1: 1, 3: 1, 6: 1, 8: 1, 12: 1},
        1202: {3: 1, 6: 1, 11: 1},
        1203: {4: 1, 7: 1, 11: 1},
        1204: {3: 1, 5: 1, 8: 1},
        1205: {2: 1, 8: 1},
        1206: {2: 1, 9: 1},
        1207: {2: 1, 5: 1, 7: 1, 9: 1, 11: 1},
        1208: {5: 1, 10: 1, 12: 1},
        1209: {5: 1, 13: 1},
        1210: {2: 1, 5: 1, 7: 1, 10: 1},
        1211: {1: 1, 3: 1, 6: 1, 10: 1},
        1212: {2: 1, 4: 1, 7: 1},
        1213: {4: 1, 7: 1, 10: 1},
        1214: {1: 1, 2: 1, 8: 1, 11: 1},
        1215: {2: 1, 5: 1, 7: 1, 9: 1},
        1216: {4: 1, 7: 1, 9: 1},
        1217: {7: 1, 12: 1},
        1218: {4: 1, 6: 1, 9: 1, 12: 1},
        1219: {2: 1, 5: 1, 9: 1},
        1220: {1: 1, 3: 1, 6: 1},
        1221: {3: 1, 6: 1, 9: 1, 12: 1},
        1222: {1: 1, 4: 1, 7: 1, 10: 1},
        1223: {1: 1, 8: 1, 11: 1, 13: 1},
        1224: {6: 1, 8: 1},
        1225: {1: 1},
        1226: {1: 1, 3: 1, 8: 1},
        1227: {4: 1, 6: 1},
        1228: {2: 1, 5: 1, 12: 1},
        1229: {2: 1, 5: 1, 8: 1, 11: 1, 12: 1},
        1230: {3: 1, 6: 1, 9: 1, 11: 1},
        1231: {7: 1, 10: 1, 12: 1},
        1232: {3: 1, 7: 1, 10: 1, 12: 1},
        1233: {3: 1, 6: 1, 11: 1},
        1234: {1: 1, 3: 1, 6: 1},
        1235: {1: 1, 3: 1, 5: 1, 8: 1},
        1236: {4: 1, 8: 1, 11: 1},
        1237: {4: 1, 7: 1, 10: 1},
        1238: {5: 1, 8: 1, 10: 1},
        1239: {6: 1, 9: 1, 11: 1},
        1240: {2: 1, 6: 1, 9: 1},
        1241: {2: 1, 5: 1, 7: 1, 10: 1},
        1242: {2: 1, 11: 1, 13: 1},
        1243: {2: 1, 7: 1},
        1244: {1: 1, 3: 1, 5: 1, 7: 1, 10: 1},
        1245: {3: 1},
        1246: {4: 1, 7: 1},
        1247: {5: 1, 8: 1, 10: 1},
        1248: {1: 1, 5: 1, 8: 1},
        1249: {1: 1, 4: 1, 6: 1, 9: 1},
        1250: {1: 1, 5: 1, 10: 1},
        1251: {1: 1, 4: 1, 7: 1, 10: 1},
        1252: {2: 1, 4: 1, 9: 1, 11: 1},
        1253: {1: 1, 7: 1, 10: 1, 12: 1},
        1254: {1: 1, 3: 1, 6: 1, 9: 1, 12: 1},
        1255: {4: 1, 7: 1, 9: 1, 13: 1},
        1256: {4: 1, 7: 1, 12: 1},
        1257: {3: 1, 5: 1, 8: 1, 12: 1},
        1258: {4: 1, 6: 1, 9: 1, 13: 1},
        1259: {3: 1, 9: 1},
        1260: {3: 1, 6: 1, 8: 1, 10: 1},
        1261: {6: 1, 9: 1, 11: 1, 13: 1},
        1262: {8: 1, 11: 1},
        1263: {1: 1, 6: 1, 8: 1, 11: -1},
        1264: {1: 1, 3: 1, 6: 1, 11: 1},
        1265: {2: 1, 4: 1, 7: 1, 11: 1},
        1266: {3: 1, 5: 1, 8: 1},
        1267: {2: 1, 8: 1},
        1268: {2: 1, 9: 1},
        1269: {3: 1, 6: 1, 8: 1, 10: 1},
        1270: {5: 1, 10: 1},
        1271: {5: 1},
        1272: {1: 1, 3: 1, 6: 1, 8: 1, 11: 1},
        1273: {1: 1, 3: 1, 6: 1, 10: 1},
        1274: {2: 1, 4: 1, 7: 1, 10: 1},
        1275: {4: 1, 7: 1, 10: 1},
        1276: {1: 1, 2: 1, 8: 1, 11: 1},
        1277: {2: 1, 5: 1, 7: 1, 9: 1},
        1278: {4: 1, 9: 1},
        1279: {7: 1, 12: 1},
        1280: {5: 1, 7: 1, 10: 1, 13: 1},
        1281: {3: -1},
        1282: {13: 1},
        1284: {12: -1},
        1287: {12: -1},
        1297: {10: -1},
        1300: {10: 1, 11: 1},
        1307: {7: -1},
        1313: {6: -1, 8: -1},
        1317: {2: 1},
        1318: {12: -1},
        1319: {6: -1},
        1321: {7: -1},
        1324: {5: -1},
        1326: {11: -1},
        1330: {12: -1},
        1333: {7: -1},
        1335: {8: 1},
        1337: {9: -1},
        1339: {10: -1},
        1344: {7: -1},
        1352: {8: -1},
        1353: {7: -1},
        1362: {6: -1},
        1364: {8: -1},
        1366: {9: -1},
        1371: {6: -1},
        1372: {7: -1},
        1373: {7: -1},
        1380: {12: -1},
        1381: {9: -1},
        1382: {7: -1},
        1388: {11: -1},
        1393: {5: -1},
        1397: {7: -1},
        1411: {3: -1},
        1414: {6: -1},
        1420: {10: -1},
        1421: {8: -1},
        1432: {1: 1},
        1440: {9: -1},
        1442: {9: -1},
        1449: {11: -1},
        1458: {10: -1},
        1462: {12: 1},
        1464: {13: 1},
        1467: {7: -1},
        1475: {12: -1},
        1480: {3: -1},
        1481: {2: -1},
        1484: {7: -1},
        1490: {7: -1},
        1495: {7: -1},
        1496: {10: -1},
        1501: {6: -1},
        1508: {1: 1},
        1513: {11: -1},
        1516: {11: 1},
        1521: {10: -1},
        1526: {7: -1},
        1527: {7: -1},
        1535: {9: -1, 11: 1},
        1544: {5: -1},
        1546: {1: 1, 8: -1},
        1571: {8: -1},
        1572: {8: -1},
        1581: {11: 1},
        1582: {7: -1},
        1588: {3: -1, 4: -1},
        1589: {1: 1},
        1591: {9: -1},
        1599: {1: 1},
        1600: {2: -1},
        1612: {3: 1},
        1616: {5: -1},
        1622: {7: -1},
        1627: {9: -1},
        1628: {1: 1},
        1630: {4: 1},
        1634: {8: -1},
        1643: {2: 1},
        1649: {5: -1},
        1662: {2: -1},
        1673: {11: 1},
        1685: {2: -1},
        1687: {3: -1},
        1694: {6: -1},
        1704: {11: 1},
        1708: {2: -1},
        1720: {7: -1},
        1759: {3: -1},
        1778: {3: -1},
        1779: {7: -1},
        1787: {12: -1},
        1789: {7: -1},
        1796: {6: -1},
        1804: {8: -1},
        1831: {4: -1},
        1842: {1: -1},
        1863: {1: -1},
        1880: {11: 1},
        1896: {2: -1},
        1914: {11: -1},
        1916: {2: -1},
        1920: {11: -1},
    };
    this.qiKB = [
        //氣直線擬合參數 使農歷-720年至2300年與壽星萬年歷匹配
        1640650.479938,
        15.218425, //-221-11-09 h=0.01709 古歷·秦漢
        1642476.703182,
        15.21874996, //-216-11-09 h=0.01557 古歷·秦漢
        1683430.515601,
        15.218750011, //-104-12-25 h=0.01560 漢書·律歷志(太初歷)平氣平朔 回歸年=365.25000
        1752157.640664,
        15.218749978, //85-02-23 h=0.01559 後漢書·律歷志(四分歷) 回歸年=365.25000
        1807675.003759,
        15.218620279, //237-02-22 h=0.00010 晉書·律歷志(景初歷) 回歸年=365.24689
        1883627.765182,
        15.218612292, //445-02-03 h=0.00026 宋書·律歷志(何承天元嘉歷) 回歸年=365.24670
        1907369.1281,
        15.218449176, //510-02-03 h=0.00027 宋書·律歷志(祖沖之大明歷) 回歸年=365.24278
        1936603.140413,
        15.218425, //590-02-17 h=0.00149 隨書·律歷志(開皇歷) 回歸年=365.24220
        1939145.52418,
        15.218466998, //597-02-03 h=0.00121 隨書·律歷志(大業歷) 回歸年=365.24321
        1947180.7983,
        15.218524844, //619-02-03 h=0.00052 新唐書·歷志(戊寅元歷)平氣定朔 回歸年=365.24460
        1964362.041824,
        15.218533526, //666-02-17 h=0.00059 新唐書·歷志(麟德歷) 回歸年=365.24480
        1987372.340971,
        15.218513908, //729-02-16 h=0.00096 新唐書·歷志(大衍歷,至德歷) 回歸年=365.24433
        1999653.819126,
        15.218530782, //762-10-03 h=0.00093 新唐書·歷志(五紀歷) 回歸年=365.24474
        2007445.469786,
        15.218535181, //784-02-01 h=0.00059 新唐書·歷志(正元歷,觀象歷) 回歸年=365.24484
        2021324.917146,
        15.218526248, //822-02-01 h=0.00022 新唐書·歷志(宣明歷) 回歸年=365.24463
        2047257.232342,
        15.218519654, //893-01-31 h=0.00015 新唐書·歷志(崇玄歷) 回歸年=365.24447
        2070282.898213,
        15.218425, //956-02-16 h=0.00149 舊五代·歷志(欽天歷) 回歸年=365.24220
        2073204.87285,
        15.218515221, //964-02-16 h=0.00166 宋史·律歷志(應天歷) 回歸年=365.24437
        2080144.500926,
        15.218530782, //983-02-16 h=0.00093 宋史·律歷志(乾元歷) 回歸年=365.24474
        2086703.688963,
        15.218523776, //1001-01-31 h=0.00067 宋史·律歷志(儀天歷,崇天歷) 回歸年=365.24457
        2110033.182763,
        15.218425, //1064-12-15 h=0.00669 宋史·律歷志(明天歷) 回歸年=365.24220
        2111190.300888,
        15.218425, //1068-02-15 h=0.00149 宋史·律歷志(崇天歷) 回歸年=365.24220
        2113731.271005,
        15.218515671, //1075-01-30 h=0.00038 李銳補修(奉元歷) 回歸年=365.24438
        2120670.840263,
        15.218425, //1094-01-30 h=0.00149 宋史·律歷志 回歸年=365.24220
        2123973.309063,
        15.218425, //1103-02-14 h=0.00669 李銳補修(占天歷) 回歸年=365.24220
        2125068.997336,
        15.218477932, //1106-02-14 h=0.00056 宋史·律歷志(紀元歷) 回歸年=365.24347
        2136026.312633,
        15.218472436, //1136-02-14 h=0.00088 宋史·律歷志(統元歷,乾道歷,淳熙歷) 回歸年=365.24334
        2156099.495538,
        15.218425, //1191-01-29 h=0.00149 宋史·律歷志(會元歷) 回歸年=365.24220
        2159021.324663,
        15.218425, //1199-01-29 h=0.00149 宋史·律歷志(統天歷) 回歸年=365.24220
        2162308.575254,
        15.218461742, //1208-01-30 h=0.00146 宋史·律歷志(開禧歷) 回歸年=365.24308
        2178485.706538,
        15.218425, //1252-05-15 h=0.04606 淳祐歷 回歸年=365.24220
        2178759.662849,
        15.218445786, //1253-02-13 h=0.00231 會天歷 回歸年=365.24270
        2185334.0208,
        15.218425, //1271-02-13 h=0.00520 宋史·律歷志(成天歷) 回歸年=365.24220
        2187525.481425,
        15.218425, //1277-02-12 h=0.00520 本天歷 回歸年=365.24220
        2188621.191481,
        15.218437494, //1280-02-13 h=0.00015 元史·歷志(郭守敬授時歷) 回歸年=365.24250
        2322147.76, //1645-09-21
    ];
    this.suoKB = [
        //朔直線擬合參數 使農歷-720年至2300年與壽星萬年歷匹配
        1457698.231017,
        29.53067166, //-721-12-17 h=0.00032 古歷·春秋
        1546082.512234,
        29.53085106, //-479-12-11 h=0.00053 古歷·戰國
        1640640.7353,
        29.5306, //-221-10-31 h=0.01010 古歷·秦漢
        1642472.151543,
        29.53085439, //-216-11-04 h=0.00040 古歷·秦漢
        1683430.5093,
        29.53086148, //-104-12-25 h=0.00313 漢書·律歷志(太初歷)平氣平朔
        1752148.041079,
        29.53085097, //85-02-13 h=0.00049 後漢書·律歷志(四分歷)
        1807724.48152,
        29.53059851, //237-04-12 h=0.00033 晉書·律歷志(景初歷)
        1883618.1141,
        29.5306, //445-01-24 h=0.00030 宋書·律歷志(何承天元嘉歷)
        1907360.7047,
        29.5306, //510-01-26 h=0.00030 宋書·律歷志(祖沖之大明歷)
        1936596.2249,
        29.5306, //590-02-10 h=0.01010 隨書·律歷志(開皇歷)
        1939135.6753,
        29.5306, //597-01-24 h=0.00890 隨書·律歷志(大業歷)
        1947168.0, //619-01-21
    ];
    /**
     * 來源: https://locutus.io/php/
     */
    this.intval = function (mixedVar, base) {
        var tmp, match;

        var type = typeof mixedVar;

        if (type === "boolean") {
            return +mixedVar;
        } else if (type === "string") {
            if (base === 0) {
                match = mixedVar.match(/^\s*0(x?)/i);
                base = match ? (match[1] ? 16 : 8) : 10;
            }
            tmp = parseInt(mixedVar, base || 10);
            if (isNaN(tmp) || !isFinite(tmp)) {
                return 0;
            }
            return tmp;
        } else if (type === "number" && isFinite(mixedVar)) {
            return mixedVar < 0 ? Math.ceil(mixedVar) : Math.floor(mixedVar);
        } else {
            return 0;
        }
    };
    /**
     * 來源: https://locutus.io/php/
     */
    this.floatval = function (mixedVar) {
        return parseFloat(mixedVar) || 0;
    };
    /**
     * 來源: https://locutus.io/php/
     */
    this.boolval = function (mixedVar) {
        if (mixedVar === false) {
            return false;
        }
        if (mixedVar === 0 || mixedVar === 0.0) {
            return false;
        }
        if (mixedVar === "" || mixedVar === "0") {
            return false;
        }
        if (Array.isArray(mixedVar) && mixedVar.length === 0) {
            return false;
        }
        if (mixedVar === null || mixedVar === undefined) {
            return false;
        }
        return true;
    };
    /**
     * 真太陽時模塊,sn代表sin
     */
    this.sn = function (x) {
        return Math.sin(x * 1.74532925199433e-2);
    };
    /**
     * 真太陽時模塊,cn代表cosine
     */
    this.cn = function (x) {
        return Math.cos(x * 1.74532925199433e-2);
    };
    /**
     * 真太陽時模塊,返回小數部分(負數特殊) returns fractional part of a number
     */
    this.fpart = function (x) {
        x = x - Math.floor(x);
        if (x < 0) {
            x = x + 1;
        }
        return x; //只取小數部份
    };
    /**
     * 真太陽時模塊,只取整數部份
     */
    this.ipart = function (x) {
        if (x == 0) {
            return 0;
        }
        return (x / Math.abs(x)) * Math.floor(Math.abs(x));
    };
    /**
     * 真太陽時模塊,finds a parabola through three points and returns values of coordinates of extreme value (xe, ye) and zeros if any (z1, z2) assumes that the x values are -1, 0, +1
     */
    this.quad = function (ym, y0, yp) {
        var nz = 0;
        var A = 0.5 * (ym + yp) - y0;
        var b = 0.5 * (yp - ym);
        var c = y0;
        var xe = -b / (2 * A); //x coord of symmetry line
        var ye = (A * xe + b) * xe + c; //extreme value for y in interval
        var dis = b * b - 4 * A * c; //discriminant
        if (dis > 0) {
            //there are zeros
            var dx = (0.5 * Math.sqrt(dis)) / Math.abs(A);
            var z1 = xe - dx;
            var z2 = xe + dx;
            if (Math.abs(z1) <= 1) {
                nz = nz + 1;
            } //This zero is in interval
            if (Math.abs(z2) <= 1) {
                nz = nz + 1;
            } //This zero is in interval
            if (z1 < -1) {
                z1 = z2;
            }
        }
        return [xe, ye, z1, z2, nz];
    };
    /**
     * 真太陽時模塊,returns sine of the altitude of either the sun or the moon given the modified julian day of the UT
     * @param float jd
     * @param float J 經度,東經為正西經為負
     * @param float W
     * @param int LX 1月亮 2太陽日升日落 3太陽海上微光
     */
    this.sinalt = function (jd, J, W, LX) {
        var instant = jd - 2400001;

        var t = (instant - 51544.5) / 36525; //減51544.5為相對2000年01月01日零點
        if (LX == 1) {
            var [ra, dec] = this.moon(t);
        } else {
            var [ra, dec] = this.sun(t);
        }

        var mjd0 = this.ipart(instant); //UT時間0點;returns the local sidereal time(計算觀測地區的恒星時)開始
        var ut = (instant - mjd0) * 24;
        var t2 = (mjd0 - 51544.5) / 36525;
        var gmst = 6.697374558 + 1.0027379093 * ut;
        gmst = gmst + ((8640184.812866 + (0.093104 - 0.0000062 * t2) * t2) * t2) / 3600;
        var lmst = 24 * this.fpart((gmst + J / 15) / 24); //結束

        var tau = 15 * (lmst - ra); //hour angle of object
        return this.sn(W) * this.sn(dec) + this.cn(W) * this.cn(dec) * this.cn(tau);
    };
    /**
     * 真太陽時模塊,關於太陽的,Returns RA and DEC of Sun to roughly 1 arcmin for few hundred years either side of J2000.0
     */
    this.sun = function (t) {
        var p2 = 2 * Math.PI;
        var COSEPS = 0.91748;
        var SINEPS = 0.39778;
        var m = p2 * this.fpart(0.993133 + 99.997361 * t); //Mean anomaly
        var dL = 6893 * Math.sin(m) + 72 * Math.sin(2 * m); //Eq centre
        var L = p2 * this.fpart(0.7859453 + m / p2 + (6191.2 * t + dL) / 1296000);
        //convert to RA and DEC - ecliptic latitude of Sun taken as zero
        var sl = Math.sin(L);
        var x = Math.cos(L);
        var y = COSEPS * sl;
        var Z = SINEPS * sl;
        var rho = Math.sqrt(1 - Z * Z);
        var dec = (360 / p2) * Math.atan(Z / rho);
        var ra = (48 / p2) * Math.atan(y / (x + rho));
        if (ra < 0) {
            ra = ra + 24;
        }
        return [ra, dec];
    };
    /**
     * 真太陽時模塊,關於月球的,Returns RA and DEC of Moon to 5 arc min (ra) and 1 arc min (dec) for a few centuries either side of J2000.0
     * Predicts rise and set times to within minutes for about 500 years in past - TDT and UT time diference may become significant for long times
     */
    this.moon = function (t) {
        var p2 = 2 * Math.PI;
        var ARC = 206264.8062;
        var COSEPS = 0.91748;
        var SINEPS = 0.39778;
        var L0 = this.fpart(0.606433 + 1336.855225 * t); //mean long Moon in revs
        var L = p2 * this.fpart(0.374897 + 1325.55241 * t); //mean anomaly of Moon
        var LS = p2 * this.fpart(0.993133 + 99.997361 * t); //mean anomaly of Sun
        var d = p2 * this.fpart(0.827361 + 1236.853086 * t); //diff longitude sun and moon
        var F = p2 * this.fpart(0.259086 + 1342.227825 * t); //mean arg latitude
        //longitude correction terms
        var dL = 22640 * Math.sin(L) - 4586 * Math.sin(L - 2 * d);
        dL = dL + 2370 * Math.sin(2 * d) + 769 * Math.sin(2 * L);
        dL = dL - 668 * Math.sin(LS) - 412 * Math.sin(2 * F);
        dL = dL - 212 * Math.sin(2 * L - 2 * d) - 206 * Math.sin(L + LS - 2 * d);
        dL = dL + 192 * Math.sin(L + 2 * d) - 165 * Math.sin(LS - 2 * d);
        dL = dL - 125 * Math.sin(d) - 110 * Math.sin(L + LS);
        dL = dL + 148 * Math.sin(L - LS) - 55 * Math.sin(2 * F - 2 * d);
        //latitude arguments
        var S = F + (dL + 412 * Math.sin(2 * F) + 541 * Math.sin(LS)) / ARC;
        var h = F - 2 * d;
        //latitude correction terms
        var N = -526 * Math.sin(h) + 44 * Math.sin(L + h) - 31 * Math.sin(h - L) - 23 * Math.sin(LS + h);
        var N = N + 11 * Math.sin(h - LS) - 25 * Math.sin(F - 2 * L) + 21 * Math.sin(F - L);
        var lmoon = p2 * this.fpart(L0 + dL / 1296000); //Lat in rads
        var bmoon = (18520 * Math.sin(S) + N) / ARC; //long in rads
        //convert to equatorial coords using a fixed ecliptic
        var CB = Math.cos(bmoon);
        var x = CB * Math.cos(lmoon);
        var V = CB * Math.sin(lmoon);
        var C = Math.sin(bmoon);
        var y = COSEPS * V - SINEPS * C;
        var Z = SINEPS * V + COSEPS * C;
        var rho = Math.sqrt(1 - Z * Z);
        var dec = (360 / p2) * Math.atan(Z / rho); //算出月球的視赤緯(apparent declination)
        var ra = (48 / p2) * Math.atan(y / (x + rho)); //算出月球的視赤經(apparent right ascension)
        if (ra < 0) {
            ra = ra + 24;
        }
        return [ra, dec];
    };
    /**
     * 真太陽時模塊,rise and set(升降計算) [升起時刻(真太陽時),落下時刻(真太陽時),真平太陽時差(僅類型2),升起時刻(標準時間,僅類型2),落下時刻(標準時間,僅類型2)]
     * @param float jd
     * @param float J 經度,東經為正西經為負
     * @param float W
     * @param int LX 類型:1月亮;2太陽日升日落;3太陽海上微光
     * @return array
     */
    this.risenset = function (jd, J, W, LX) {
        var jd = this.floatval(jd);
        var J = +1 * this.floatval(J); //統一東經為正
        var W = +1 * this.floatval(W); //北緯為正,南緯為負

        var noon = Math.round(jd) - this.J / 360; //儒略日,中午12點,減去8小時時差

        var sinho = new Array(3); //太陽盤面幾何中心與理想地平面之間的夾角
        sinho[1] = this.sn(8 / 60); //moonrise - average diameter used(月亮升降)
        sinho[2] = this.sn(-50 / 60); //sunrise - classic value for refraction(太陽升降)
        sinho[3] = this.sn(-12); //nautical twilight(海上微光)

        var rise = 0; //是否有升起動作
        var utrise = false; //升起的時間

        var sett = 0; //是否有落下動作
        var utset = false; //落下的時間

        var hour = 1;
        var zero2 = 0; //兩小時內是否進行了升起和落下兩個動作(極地附近有這種情況,如1999年12月25日,經度0,緯度67.43,當天的太陽只有8分鐘-_-)

        var ym = this.sinalt(noon + (hour - 1) / 24, J, W, LX) - sinho[LX]; //See STEP 1 and 2 of Web page description.
        if (ym > 0) {
            //used later to classify non-risings 是否在地平線上方,用於判斷極晝極夜
            var above = 1;
        } else {
            var above = 0;
        }

        do {
            //STEP 1 and STEP 3 of Web page description
            var y0 = this.sinalt(noon + (hour + 0) / 24, J, W, LX) - sinho[LX];
            var yp = this.sinalt(noon + (hour + 1) / 24, J, W, LX) - sinho[LX];
            //STEP 4 of web page description
            var [xe, ye, z1, z2, nz] = this.quad(ym, y0, yp);
            switch (
                nz //cases depend on values of discriminant - inner part of STEP 4
            ) {
                case 0: //nothing  - go to next time slot
                    break;
                case 1: //simple rise / set event
                    if (ym < 0) {
                        //must be a rising event
                        utrise = hour + z1;
                        rise = 1;
                    } else {
                        //must be setting
                        utset = hour + z1;
                        sett = 1;
                    }
                    break;
                case 2: //rises and sets within interval
                    if (ye < 0) {
                        //minimum - so set then rise
                        utrise = hour + z2;
                        utset = hour + z1;
                    } else {
                        //maximum - so rise then set
                        utrise = hour + z1;
                        utset = hour + z2;
                    }
                    rise = 1;
                    sett = 1;
                    zero2 = 1;
                    break;
            }
            ym = yp; //reuse the ordinate in the next interval
            hour = hour + 2;
        } while (!(hour == 25 || rise * sett == 1)); //STEP 5 of Web page description - have we finished for this object?

        if (utset !== false) {
            //注意這里轉成了真太陽時
            utset = Math.round(jd) - 0.5 + utset / 24 - ((this.J - J) * 4) / 60 / 24;
        }
        if (utrise !== false) {
            utrise = Math.round(jd) - 0.5 + utrise / 24 - ((this.J - J) * 4) / 60 / 24;
        }

        var dt = 0; //地方平太陽時 減 真太陽時 的差值,即"真平太陽時差換算表",單位為天
        var tset = LX == 2 ? utset : 0; //用於返回標準時間,關於月亮的必須先通過太陽升降獲取到dt再轉標準時間
        var trise = LX == 2 ? utrise : 0;
        if (LX == 2 && rise * sett == 1) {
            //太陽相關,非極晝極夜且有升有落
            while (tset < trise) {
                //太陽先落下再升起,時區與經度不匹配的情況下會出現此種情況,加一天修正
                tset += 1;
            }
            dt = Math.round(jd) - (trise + (tset - trise) / 2); //單位為天.比較兩者的中午12點(上午和下午是對稱的)

            tset = tset - dt + ((this.J - J) * 4) / 60 / 24; //真太陽時轉標準時間
            trise = trise - dt + ((this.J - J) * 4) / 60 / 24;
        }

        return [utrise, utset, dt, trise, tset];
    };
    /**
     * 真太陽時模塊,改編自 https://bieyu.com/ (月亮與太陽出沒時間) 原理:用天文方法計算出太陽升起和落下時刻,中間則為當地正午(自創),與12點比較得到時差;與壽星萬年歷比較,兩者相差在20秒內
     * @param float jd
     * @param float J 經度,東經為正西經為負,注意西經60度38分轉換方式是: -60 + -1 * 38/60
     * @param float W 緯度,北緯為正南緯為負,太陽並不是嚴格從正東方升起,所以緯度也有影響,只是相對影響較小
     */
    this.zty = function (jd, J, W) {
        var jd = this.floatval(jd);
        var J = J === undefined ? this.J : this.floatval(J);
        var W = W === undefined ? this.W : this.floatval(W);

        var [utrise, utset, dt, trise, tset] = this.risenset(jd, J, W, 2);

        return jd - ((this.J - J) * 4) / 60 / 24 + dt; //轉地方平太陽時+修正
    };
    /**
     * 將公歷時間轉換爲儒略日
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-31)
     * @param int hh(0-23)
     * @param int mt(0-59)
     * @param int ss(0-59)
     * @return false|number
     */
    this.Jdays = function (yy, mm, dd, hh, mt, ss) {
        var yy = this.floatval(yy);
        var mm = this.floatval(mm);
        var dd = this.floatval(dd);
        var hh = hh === undefined ? 12 : this.floatval(hh);
        var mt = mt === undefined ? 0 : this.floatval(mt);
        var ss = ss === undefined ? 0 : this.floatval(ss);

        var yp = yy + Math.floor((mm - 3) / 10);
        if (yy > 1582 || (yy == 1582 && mm > 10) || (yy == 1582 && mm == 10 && dd >= 15)) {
            var init = 1721119.5;
            var jdy = Math.floor(yp * 365.25) - Math.floor(yp / 100) + Math.floor(yp / 400);
        } else {
            if (yy < 1582 || (yy == 1582 && mm < 10) || (yy == 1582 && mm == 10 && dd <= 4)) {
                var init = 1721117.5;
                var jdy = Math.floor(yp * 365.25);
            } else {
                //不存在的時間
                return false;
            }
        }
        var mp = Math.floor(mm + 9) % 12;
        var jdm = mp * 30 + Math.floor(((mp + 1) * 34) / 57);
        var jdd = dd - 1;
        hh = hh + (ss / 60 + mt) / 60;
        var jdh = hh / 24;
        return jdy + jdm + jdd + jdh + init;
    };
    /**
     * 將儒略日轉換爲公歷(即陽曆或格里曆)年月日時分秒 [年,月,日,時,分,秒]
     * @param float jd
     * @return array
     */
    this.Jtime = function (jd) {
        var jd = this.floatval(jd);
        if (jd >= 2299160.5) {
            //以1582年的10月15日0時(JD值2299160.5)為分界點,在這之前為儒略曆,之後為格里曆
            var y4h = 146097;
            var init = 1721119.5;
        } else {
            var y4h = 146100;
            var init = 1721117.5;
        }
        var jdr = Math.floor(jd - init);
        var yh = y4h / 4;
        var cen = Math.floor((jdr + 0.75) / yh);
        var d = Math.floor(jdr + 0.75 - cen * yh);
        var ywl = 1461 / 4;
        var jy = Math.floor((d + 0.75) / ywl);
        d = Math.floor(d + 0.75 - ywl * jy + 1);
        var ml = 153 / 5;
        var mp = Math.floor((d - 0.5) / ml);
        d = Math.floor(d - 0.5 - 30.6 * mp + 1);
        var y = 100 * cen + jy;
        var m = ((mp + 2) % 12) + 1;
        if (m < 3) {
            y = y + 1;
        }
        var sd = Math.floor((jd + 0.5 - Math.floor(jd + 0.5)) * 24 * 60 * 60 + 0.00005);
        var mt = Math.floor(sd / 60);
        var ss = sd % 60;
        var hh = Math.floor(mt / 60);
        var mt = mt % 60;
        var yy = Math.floor(y);
        var mm = Math.floor(m);
        var dd = Math.floor(d);

        return [yy, mm, dd, hh, mt, ss];
    };
    /**
     * 驗證公歷日期是否有效
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-31)
     * @return boolean
     */
    this.ValidDate = function (yy, mm, dd) {
        var vd = true;
        if (mm <= 0 || mm > 12) {
            //月份超出範圍
            vd = false;
        } else {
            var ndf1 = -(yy % 4 == 0); //可被四整除
            var ndf2 = (yy % 400 == 0) - (yy % 100 == 0) && yy > 1582;
            var ndf = ndf1 + ndf2;
            var dom = 30 + ((Math.abs(mm - 7.5) + 0.5) % 2) - (mm == 2) * (2 + ndf);
            if (dd <= 0 || dd > dom) {
                if (ndf == 0 && mm == 2 && dd == 29) {
                    //此年無閏月
                } else {
                    //日期超出範圍
                }
                vd = false;
            }
        }
        if (yy == 1582 && mm == 10 && dd >= 5 && dd < 15) {
            //此日期不存在
            vd = false;
        }
        return vd;
    };
    /**
     * 計算指定年(公歷)的春分點(vernal equinox)理論值
     * 因地球在繞日運行時會因受到其他星球之影響而產生攝動(perturbation),必須將此現象產生的偏移量加入.
     * @param int yy
     * @return false|number 返回儒略日歷時間
     */
    this.VE = function (yy) {
        var yx = this.intval(yy);
        if (yx >= 1000 && yx <= 8001) {
            var m = (yx - 2000) / 1000;
            var jdve = 2451623.80984 + 365242.37404 * m + 0.05169 * m * m - 0.00411 * m * m * m - 0.00057 * m * m * m * m;
        } else {
            if (yx >= -8000 && yx < 1000) {
                var m = yx / 1000;
                var jdve = 1721139.29189 + 365242.1374 * m + 0.06134 * m * m + 0.00111 * m * m * m - 0.00071 * m * m * m * m;
            } else {
                //超出計算能力範圍
                return false;
            }
        }
        return jdve;
    };
    /**
     * 獲取指定公歷年的春分開始的24節氣理論值
     * 大致原理是:把公轉軌道進行24等分,每一等分為一個節氣,此為理論值,再用攝動值(Perturbation)和固定參數DeltaT做調整得到實際值
     * @param int yy
     * @return array 下標從0開始的數組
     */
    this.MeanJQJD = function (yy) {
        var yy = this.intval(yy);

        var jdez = [];
        var jdve = this.VE(yy);
        var ty = this.VE(yy + 1) - jdve; //求指定年的春分點及回歸年長

        var ath = (2 * Math.PI) / 24;
        var tx = (jdve - 2451545) / 365250;
        var e = 0.0167086342 - 0.0004203654 * tx - 0.0000126734 * tx * tx + 0.0000001444 * tx * tx * tx - 0.0000000002 * tx * tx * tx * tx + 0.0000000003 * tx * tx * tx * tx * tx;
        var tt = yy / 1000;
        var vp = 111.25586939 - 17.0119934518333 * tt - 0.044091890166673 * tt * tt - 4.37356166661345e-4 * tt * tt * tt + 8.16716666602386e-6 * tt * tt * tt * tt;
        var rvp = (vp * 2 * Math.PI) / 360;
        var peri = [];
        for (var i = 1; i <= 24; i++) {
            var flag = 0;
            var th = ath * (i - 1) + rvp;
            if (th > Math.PI && th <= 3 * Math.PI) {
                th = 2 * Math.PI - th;
                flag = 1;
            }
            if (th > 3 * Math.PI) {
                th = 4 * Math.PI - th;
                flag = 2;
            }
            var f1 = 2 * Math.atan(Math.sqrt((1 - e) / (1 + e)) * Math.tan(th / 2));
            var f2 = (e * Math.sqrt(1 - e * e) * Math.sin(th)) / (1 + e * Math.cos(th));
            var f = ((f1 - f2) * ty) / 2 / Math.PI;
            if (flag == 1) {
                f = ty - f;
            }
            if (flag == 2) {
                f = 2 * ty - f;
            }
            peri[i] = f;
        }
        for (var i = 1; i <= 24; i++) {
            jdez[i - 1] = jdve + peri[i] - peri[1];
        }
        return jdez;
    };
    /**
     * 地球在繞日運行時會因受到其他星球之影響而產生攝動(perturbation)
     * @param float jdez Julian day
     * @return number 返回某時刻(儒略日歷)的攝動偏移量
     */
    this.Perturbation = function (jdez) {
        var jdez = this.floatval(jdez);
        var ptsa = [485, 203, 199, 182, 156, 136, 77, 74, 70, 58, 52, 50, 45, 44, 29, 18, 17, 16, 14, 12, 12, 12, 9, 8];
        var ptsb = [
            324.96, 337.23, 342.08, 27.85, 73.14, 171.52, 222.54, 296.72, 243.58, 119.81, 297.17, 21.02, 247.54, 325.15, 60.93, 155.12, 288.79, 198.04, 199.76, 95.39, 287.11, 320.81, 227.73, 15.45,
        ];
        var ptsc = [
            1934.136, 32964.467, 20.186, 445267.112, 45036.886, 22518.443, 65928.934, 3034.906, 9037.513, 33718.147, 150.678, 2281.226, 29929.562, 31555.956, 4443.417, 67555.328, 4562.452, 62894.029,
            31436.921, 14577.848, 31931.756, 34777.259, 1222.114, 16859.074,
        ];
        var t = (jdez - 2451545) / 36525;
        var s = 0;
        for (var k = 0; k <= 23; k++) {
            s = s + ptsa[k] * Math.cos((ptsb[k] * 2 * Math.PI) / 360 + ((ptsc[k] * 2 * Math.PI) / 360) * t);
        }
        var w = 35999.373 * t - 2.47;
        var l = 1 + 0.0334 * Math.cos((w * 2 * Math.PI) / 360) + 0.0007 * Math.cos((2 * w * 2 * Math.PI) / 360);
        return (0.00001 * s) / l;
    };
    /**
     * 求∆t
     * @param int yy 公歷年份
     * @param int mm 公歷月份,可能為負數
     * @return number 單位為分鐘
     */
    this.DeltaT = function (yy, mm) {
        var yy = this.intval(yy);
        var mm = this.intval(mm);

        var u, t, dt, y;
        y = yy + (mm - 0.5) / 12;
        if (y <= -500) {
            u = (y - 1820) / 100;
            dt = -20 + 32 * u * u;
        } else {
            if (y < 500) {
                u = y / 100;
                dt = 10583.6 - 1014.41 * u + 33.78311 * u * u - 5.952053 * u * u * u - 0.1798452 * u * u * u * u + 0.022174192 * u * u * u * u * u + 0.0090316521 * u * u * u * u * u * u;
            } else {
                if (y < 1600) {
                    u = (y - 1000) / 100;
                    dt = 1574.2 - 556.01 * u + 71.23472 * u * u + 0.319781 * u * u * u - 0.8503463 * u * u * u * u - 0.005050998 * u * u * u * u * u + 0.0083572073 * u * u * u * u * u * u;
                } else {
                    if (y < 1700) {
                        t = y - 1600;
                        dt = 120 - 0.9808 * t - 0.01532 * t * t + (t * t * t) / 7129;
                    } else {
                        if (y < 1800) {
                            t = y - 1700;
                            dt = 8.83 + 0.1603 * t - 0.0059285 * t * t + 0.00013336 * t * t * t - (t * t * t * t) / 1174000;
                        } else {
                            if (y < 1860) {
                                t = y - 1800;
                                dt =
                                    13.72 -
                                    0.332447 * t +
                                    0.0068612 * t * t +
                                    0.0041116 * t * t * t -
                                    0.00037436 * t * t * t * t +
                                    0.0000121272 * t * t * t * t * t -
                                    0.0000001699 * t * t * t * t * t * t +
                                    0.000000000875 * t * t * t * t * t * t * t;
                            } else {
                                if (y < 1900) {
                                    t = y - 1860;
                                    dt = 7.62 + 0.5737 * t - 0.251754 * t * t + 0.01680668 * t * t * t - 0.0004473624 * t * t * t * t + (t * t * t * t * t) / 233174;
                                } else {
                                    if (y < 1920) {
                                        t = y - 1900;
                                        dt = -2.79 + 1.494119 * t - 0.0598939 * t * t + 0.0061966 * t * t * t - 0.000197 * t * t * t * t;
                                    } else {
                                        if (y < 1941) {
                                            t = y - 1920;
                                            dt = 21.2 + 0.84493 * t - 0.0761 * t * t + 0.0020936 * t * t * t;
                                        } else {
                                            if (y < 1961) {
                                                t = y - 1950;
                                                dt = 29.07 + 0.407 * t - (t * t) / 233 + (t * t * t) / 2547;
                                            } else {
                                                if (y < 1986) {
                                                    t = y - 1975;
                                                    dt = 45.45 + 1.067 * t - (t * t) / 260 - (t * t * t) / 718;
                                                } else {
                                                    if (y < 2005) {
                                                        t = y - 2000;
                                                        dt = 63.86 + 0.3345 * t - 0.060374 * t * t + 0.0017275 * t * t * t + 0.000651814 * t * t * t * t + 0.00002373599 * t * t * t * t * t;
                                                    } else {
                                                        if (y < 2050) {
                                                            t = y - 2000;
                                                            dt = 62.92 + 0.32217 * t + 0.005589 * t * t;
                                                        } else {
                                                            if (y < 2150) {
                                                                u = (y - 1820) / 100;
                                                                dt = -20 + 32 * u * u - 0.5628 * (2150 - y);
                                                            } else {
                                                                u = (y - 1820) / 100;
                                                                dt = -20 + 32 * u * u;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (y < 1955 || y >= 2005) {
            dt = dt - 0.000012932 * (y - 1955) * (y - 1955);
        }
        return dt / 60; //將秒轉換為分
    };
    /**
     * 獲取指定公歷年對Perturbaton作調整後的自春分點開始的24節氣,1645年農歷七月及之前為<授時歷>,八月開始啟用傳教士湯若望的<時憲歷>,與現代天文算法存在誤差,此處依據壽星萬年歷進行修正
     * @param int yy(-1000-3000)
     * @param bool calendar 是否根據黃歷進行調整,調整後精度為日(僅用於農歷計算)
     * @return array this.jq[i%24]
     */
    this.GetAdjustedJQ = function (yy, calendar) {
        var yy = this.intval(yy);
        var calendar = calendar ? 1 : 0;

        if (this.JQ[yy] == undefined) {
            this.JQ[yy] = [];
        }
        if (this.JQ[yy][0] == undefined) {
            //必須要有0
            var jdjq = [];
            var jdez = this.MeanJQJD(yy); //輸入指定年,求該回歸年各節氣點
            for (var i = 0; i < 24; i++) {
                var ptb = this.Perturbation(jdez[i]); //取得受perturbation影響所需微調
                var dt = this.DeltaT(yy, Math.ceil(i / 2) + 3); //修正dynamical time to Universal time
                jdjq[i] = jdez[i] + ptb - dt / 60 / 24; //加上攝動調整值ptb得到動態時間dynamical time or ephemeris days,減去對應的Delta T值(分鐘轉換為日)得到True Universal time
                jdjq[i] = jdjq[i] + 8 / 24; //因中國時間比格林威治時間先行8小時,即1/3日(由於農歷基於此數據,此處必須為北京時間)
            }
            this.JQ[yy][0] = jdjq;
        }
        if (this.JQ[yy][calendar]) {
            //如果是0此處必返回
            return this.JQ[yy][calendar].slice(0);
        }

        var refer = true; //reference 如果無需修正則1直接引用0的
        var jdjq = this.JQ[yy][0].slice(0); //打破引用
        if (calendar == 1) {
            //古代農歷模塊完全來自壽星萬年歷
            var B = this.qiKB; //氣直線擬合參數
            var pc = 7; //兩氣之間15天左右,7為中間偏一點以便找到最近的
            var f1 = B[0] - pc; //1640650.479938 - 7, -221-11-09 h=0.01709 古歷·秦漢開始至沒有天文算法(定氣定朔)之前,古人采取平氣平朔的方法,各朝代改動較大,許老師從繁雜的古歷中提取數據進行分析而得到算法,致敬!
            var f2 = B[B.length - 1] - pc; //1645-09-21 - 7 這之後采取徐光啟與傳教士湯若望合著的時憲歷法,與現代天文算法僅存在最多上下一天的誤差,所以簡單采取修正表修正
            var f3 = 2436935; //1960年01月01日12時00分00秒,這之後采取現代天文算法
            if ((jdjq[0] >= f1 && jdjq[0] < f2) || (jdjq[23] >= f1 && jdjq[23] < f2)) {
                //處於平氣計算區間
                refer = false; //標志不能進行引用
                for (var i = 0, j = 0; j < 24; j++) {
                    //逐個進行修正
                    if (jdjq[j] < f1 || jdjq[j] >= f2) {
                        //此時刻不在計算區間
                        continue;
                    }
                    if (jdjq[j] + pc >= B[i + 2]) {
                        //跨越了不同的歷法
                        for (; i < B.length; i += 2) {
                            if (jdjq[j] + pc < B[i + 2]) {
                                break;
                            }
                        }
                    }

                    jdjq[j] = B[i] + B[i + 1] * Math.floor((jdjq[j] + pc - B[i]) / B[i + 1]);
                    jdjq[j] = Math.floor(jdjq[j] + 0.5);
                    if (jdjq[j] == 1683460) {
                        jdjq[j]++; //如果使用太初歷計算-103年1月24日的朔日,結果得到的是23日,這里修正為24日(實歷).修正後仍不影響-103的無中置閏.如果使用秦漢歷,得到的是24日,本行D不會被執行.
                    }
                }
            }
            for (var i in this.jqXFu[yy]) {
                //時憲歷修正表,上面平氣跑出來的不會來這里
                refer = false; //標志不能進行引用
                jdjq[i] += this.jqXFu[yy][i];
                jdjq[i] = Math.floor(jdjq[i] + 0.5); //修正後精度為日
            }
        }

        this.JQ[yy][calendar] = refer ? this.JQ[yy][0] : jdjq;

        return jdjq;
    };
    /**
     * 對於指定日期時刻所屬的朔望月,求出其均值新月點的月序數或時刻
     * @param float jd
     * @param bool return_k 是否僅返回月序數
     * @return int/float
     */
    this.MeanNewMoon = function (jd, return_k) {
        var jd = this.floatval(jd);

        //k為從2000年1月6日14時20分36秒起至指定年月日之陰曆月數,以synodic month為單位
        var k = Math.floor((jd - 2451550.09765) / this.synmonth); //2451550.09765為2000年1月6日14時20分36秒之JD值,此為2000年後的第一個均值新月
        if (return_k) {
            return k;
        }
        var jdt = 2451550.09765 + k * this.synmonth;
        //Time in Julian centuries from 2000 January 0.5.
        var t = (jdt - 2451545) / 36525; //以100年為單位,以2000年1月1日12時為0點
        var pt = jdt + 0.0001337 * t * t - 0.00000015 * t * t * t + 0.00000000073 * t * t * t * t; //mean time of phase

        return pt;
    };
    /**
     * 求出實際新月點.以2000年初的第一個均值新月點為0點求出的均值新月點和其朔望月之序數k代入此副程式來求算實際新月點
     * @param float jd
     * @param bool calendar 是否根據黃歷進行調整,調整後精度為日(僅用於農歷計算)
     * @return number
     */
    this.TrueNewMoon = function (jd, calendar) {
        var jd = this.floatval(jd);
        var calendar = calendar ? 1 : 0;

        if (calendar == 1) {
            //先判斷是否需要進行朔直線擬合
            var B = this.suoKB; //朔直線擬合參數
            var pc = 14; //兩朔之間30天左右
            var f1 = B[0] - pc; //1457698.231017 - 7, -721-12-17 h=0.00032
            var f2 = B[B.length - 1] - pc; //1947168.00 - 7, 619-01-21 古人很早就知道用天文算法進行定朔了
            var f3 = 2436935; //1960年01月01日12時00分00秒,這之後采取現代天文算法
            if (jd >= f1 && jd < f2) {
                //處於平朔計算區間
                for (var i = 0; i < B.length; i += 2) {
                    if (jd + pc < B[i + 2]) {
                        break;
                    }
                }
                var jdt = B[i] + B[i + 1] * Math.floor((jd + pc - B[i]) / B[i + 1]);
                jdt = Math.floor(jdt + 0.5);
                if (jdt == 1683460) {
                    jdt++; //如果使用太初歷計算-103年1月24日的朔日,結果得到的是23日,這里修正為24日(實歷).修正後仍不影響-103的無中置閏.如果使用秦漢歷,得到的是24日,本行D不會被執行.
                }

                return jdt;
            }
        }

        var k = this.MeanNewMoon(jd, true); //+ 0,0.25,0.5,0.75分別對應新月,上弦月,滿月,下弦月
        var jdt = 2451550.09765 + k * this.synmonth;
        var t = (jdt - 2451545) / 36525; //2451545為2000年1月1日正午12時的JD
        var t2 = t * t; //square for frequent use
        var t3 = t2 * t; //cube for frequent use
        var t4 = t3 * t; //to the fourth
        //mean time of phase
        var pt = jdt + 0.0001337 * t2 - 0.00000015 * t3 + 0.00000000073 * t4;
        //Sun's mean anomaly(地球繞太陽運行均值近點角)(從太陽觀察)
        var m = 2.5534 + 29.10535669 * k - 0.0000218 * t2 - 0.00000011 * t3;
        //Moon's mean anomaly(月球繞地球運行均值近點角)(從地球觀察)
        var mprime = 201.5643 + 385.81693528 * k + 0.0107438 * t2 + 0.00001239 * t3 - 0.000000058 * t4;
        //Moon's argument of latitude(月球的緯度參數)
        var f = 160.7108 + 390.67050274 * k - 0.0016341 * t2 - 0.00000227 * t3 + 0.000000011 * t4;
        //Longitude of the ascending node of the lunar orbit(月球繞日運行軌道升交點之經度)
        var omega = 124.7746 - 1.5637558 * k + 0.0020691 * t2 + 0.00000215 * t3;
        //乘式因子
        var es = 1 - 0.002516 * t - 0.0000074 * t2;
        //因perturbation造成的偏移
        var apt1 = -0.4072 * Math.sin((Math.PI / 180) * mprime);
        apt1 += 0.17241 * es * Math.sin((Math.PI / 180) * m);
        apt1 += 0.01608 * Math.sin((Math.PI / 180) * 2 * mprime);
        apt1 += 0.01039 * Math.sin((Math.PI / 180) * 2 * f);
        apt1 += 0.00739 * es * Math.sin((Math.PI / 180) * (mprime - m));
        apt1 -= 0.00514 * es * Math.sin((Math.PI / 180) * (mprime + m));
        apt1 += 0.00208 * es * es * Math.sin((Math.PI / 180) * (2 * m));
        apt1 -= 0.00111 * Math.sin((Math.PI / 180) * (mprime - 2 * f));
        apt1 -= 0.00057 * Math.sin((Math.PI / 180) * (mprime + 2 * f));
        apt1 += 0.00056 * es * Math.sin((Math.PI / 180) * (2 * mprime + m));
        apt1 -= 0.00042 * Math.sin((Math.PI / 180) * 3 * mprime);
        apt1 += 0.00042 * es * Math.sin((Math.PI / 180) * (m + 2 * f));
        apt1 += 0.00038 * es * Math.sin((Math.PI / 180) * (m - 2 * f));
        apt1 -= 0.00024 * es * Math.sin((Math.PI / 180) * (2 * mprime - m));
        apt1 -= 0.00017 * Math.sin((Math.PI / 180) * omega);
        apt1 -= 0.00007 * Math.sin((Math.PI / 180) * (mprime + 2 * m));
        apt1 += 0.00004 * Math.sin((Math.PI / 180) * (2 * mprime - 2 * f));
        apt1 += 0.00004 * Math.sin((Math.PI / 180) * (3 * m));
        apt1 += 0.00003 * Math.sin((Math.PI / 180) * (mprime + m - 2 * f));
        apt1 += 0.00003 * Math.sin((Math.PI / 180) * (2 * mprime + 2 * f));
        apt1 -= 0.00003 * Math.sin((Math.PI / 180) * (mprime + m + 2 * f));
        apt1 += 0.00003 * Math.sin((Math.PI / 180) * (mprime - m + 2 * f));
        apt1 -= 0.00002 * Math.sin((Math.PI / 180) * (mprime - m - 2 * f));
        apt1 -= 0.00002 * Math.sin((Math.PI / 180) * (3 * mprime + m));
        apt1 += 0.00002 * Math.sin((Math.PI / 180) * (4 * mprime));

        var apt2 = 0.000325 * Math.sin((Math.PI / 180) * (299.77 + 0.107408 * k - 0.009173 * t2));
        apt2 += 0.000165 * Math.sin((Math.PI / 180) * (251.88 + 0.016321 * k));
        apt2 += 0.000164 * Math.sin((Math.PI / 180) * (251.83 + 26.651886 * k));
        apt2 += 0.000126 * Math.sin((Math.PI / 180) * (349.42 + 36.412478 * k));
        apt2 += 0.00011 * Math.sin((Math.PI / 180) * (84.66 + 18.206239 * k));
        apt2 += 0.000062 * Math.sin((Math.PI / 180) * (141.74 + 53.303771 * k));
        apt2 += 0.00006 * Math.sin((Math.PI / 180) * (207.14 + 2.453732 * k));
        apt2 += 0.000056 * Math.sin((Math.PI / 180) * (154.84 + 7.30686 * k));
        apt2 += 0.000047 * Math.sin((Math.PI / 180) * (34.52 + 27.261239 * k));
        apt2 += 0.000042 * Math.sin((Math.PI / 180) * (207.19 + 0.121824 * k));
        apt2 += 0.00004 * Math.sin((Math.PI / 180) * (291.34 + 1.844379 * k));
        apt2 += 0.000037 * Math.sin((Math.PI / 180) * (161.72 + 24.198154 * k));
        apt2 += 0.000035 * Math.sin((Math.PI / 180) * (239.56 + 25.513099 * k));
        apt2 += 0.000023 * Math.sin((Math.PI / 180) * (331.55 + 3.592518 * k));

        jdt = pt + apt1 + apt2;
        var [yy, mm, dd] = this.Jtime(jdt);
        jdt = jdt - this.DeltaT(yy, mm) / 1440; //修正dynamical time to Universal time
        jdt = jdt + 8 / 24; //因中國比格林威治先行8小時,加1/3天

        if (calendar && this.smXFu[yy]) {
            //下面進行查表修正
            var jd = this.Jdays(yy, 1, 1, 0, 0, 0); //算<=當年的那個朔望日
            var k2 = this.MeanNewMoon(jd, true);
            var n = k - k2; //當年第幾個朔望日,用作校準的下標
            if (this.smXFu[yy][n]) {
                jdt += this.smXFu[yy][n];
                jdt = Math.floor(jdt + 0.5); //修正後精度為日
            }
        }

        return jdt;
    };
    /**
     * 以比較日期法求算冬月及其餘各月名稱代碼,包含閏月,冬月為0,臘月為1,正月為2,餘類推.閏月多加0.5 [各月名稱, 含冬至連續16個新月點]
     * @param int yy(-1000-3000)
     * @return array
     */
    this.GetZQandSMandLunarMonthCode = function (yy) {
        var yy = this.intval(yy);

        if (this.MC[yy] && this.SM[yy]) {
            return [this.MC[yy].slice(0), this.SM[yy].slice(0)];
        }

        var mc = []; //名稱 MingCheng
        var sjd = []; //shuo jd
        var qjd = []; //qi jd

        for (var i = -1, k = 0; i <= 1; i++) {
            //取得以前一年冬至為起點之連續16個中氣 qi jd
            var jq = this.GetAdjustedJQ(yy + i, true);
            for (var j = 0; j <= 22; j += 2, k++) {
                if (k >= 9 && k <= 24) {
                    qjd[k - 9] = jq[j];
                }
            }
        }

        var jd = qjd[0] - 2 * this.synmonth - 14; //冬至之前的29天起算,兼顧1/3時差及修正,加14則兼顧步長
        for (var i = 0; i < 15; ) {
            jd = this.TrueNewMoon(jd + this.synmonth + 14, true);
            if (Math.floor(jd + 0.5) > Math.floor(qjd[0] + 0.5)) {
                i++;
            }
            sjd[i] = jd;
        }

        var yz = 0; //設定旗標,0表示未遇到閏月,1表示已遇到閏月
        mc[0] = 0;
        if (Math.floor(qjd[12] + 0.5) >= Math.floor(sjd[13] + 0.5)) {
            //若第13個中氣jdzq(12)大於或等於第14個新月jdnm(13)
            for (var i = 1; i <= 14; i++) {
                //表示此兩個冬至之間的11個中氣要放到12個朔望月中,
                //至少有一個朔望月不含中氣,第一個不含中氣的月即為閏月
                //若陰曆臘月起始日大於冬至中氣日,且陰曆正月起始日小於或等於大寒中氣日,則此月為閏月,其餘同理
                if (Math.floor(sjd[i] + 0.5 > Math.floor(qjd[i - 1 - yz] + 0.5) && Math.floor(sjd[i + 1] + 0.5) <= Math.floor(qjd[i - yz] + 0.5))) {
                    mc[i] = i - 0.5;
                    yz = 1; //標示遇到閏月
                } else {
                    mc[i] = i - yz; //遇到閏月開始,每個月號要減1
                }
            }
        } else {
            //否則表示兩個連續冬至之間只有11個整月,故無閏月
            for (var i = 1; i <= 12; i++) {
                //直接賦予這12個月月代碼
                mc[i] = i;
            }
            for (var i = 13; i <= 14; i++) {
                //處理次一置月年的11月與12月,亦有可能含閏月
                //若次一陰曆臘月起始日大於附近的冬至中氣日,且陰曆正月起始日小於或等於大寒中氣日,則此月為閏月,次一正月同理.
                if (Math.floor(sjd[i] + 0.5 > Math.floor(qjd[i - 1 - yz] + 0.5) && Math.floor(sjd[i + 1] + 0.5) <= Math.floor(qjd[i - yz] + 0.5))) {
                    mc[i] = i - 0.5;
                    yz = 1; //標示遇到閏月
                } else {
                    mc[i] = i - yz; //遇到閏月開始,每個月號要減1
                }
            }
        }

        this.MC[yy] = mc;
        this.SM[yy] = sjd;

        return [mc, sjd];
    };
    /**
     * 將農歷時間轉換成公歷時間 [年,月,日,附加資料]
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-30)
     * @param boolean ry 是否閏月
     * @return false/array
     */
    this.Lunar2Solar = function (yy, mm, dd, ry) {
        //此為將陰曆日期轉換為陽曆日期的主程式
        var yy = this.intval(yy);
        var mm = this.intval(mm);
        var dd = this.intval(dd);
        var ry = this.boolval(ry);

        if (mm < 1 || mm > 12) {
            //月份錯誤
            return false;
        }
        if (dd < 1 || dd > 30) {
            //日期錯誤
            return false;
        }
        var ob = {
            //返回附加資料
            leap: 0, //閏月,以1為正月開始
            days: [], //每月多少天[5][1] = 30;表示該年閏五月30天
        };
        var [mc, sjd] = this.GetZQandSMandLunarMonthCode(yy);
        var runyue = 0; //若閏月旗標為0代表無閏月
        for (var j = 1; j <= 14; j++) {
            //確認指定年前一年11月開始各月是否閏月
            if (mc[j] - Math.floor(mc[j]) > 0) {
                //若是,則將此閏月代碼放入閏月旗標內
                runyue = Math.floor(mc[j] + 0.5); //runyue=0對應陰曆11月,1對應陰曆12月,2對應陰曆隔年1月,依此類推.
                if (runyue >= 3) {
                    ob.leap = runyue - 2;
                }
                break;
            }
        }
        var mx = mm + 2; //11月對應到1,12月對應到2,1月對應到3,2月對應到4,依此類推
        var nofd = []; //大概是number of day的意思
        for (var i = 0; i <= 14; i++) {
            //求算陰曆各月之大小,大月30天,小月29天,0為農歷11月
            nofd[i] = Math.floor(sjd[i + 1] + 0.5) - Math.floor(sjd[i] + 0.5); //每月天數,加0.5是因JD以正午起算
            if (mc[i] < 2) {
                continue;
            }
            var m = Math.floor(mc[i] - 1); //月份
            if (m > 12) {
                continue;
            }
            var j = m == mc[i] - 1 ? 0 : 1; //是否閏月
            if (ob.days[m] == undefined) {
                ob.days[m] = [];
            }
            ob.days[m][j] = nofd[i];
        }
        var er = 0; //若輸入值有錯誤,er值將被設定為對應錯誤代碼
        if (ry == true) {
            //若有勾選閏月
            if (runyue < 3) {
                //而旗標非閏月或非本年閏月,則表示此年不含閏月,runyue=0代表無閏月,=1代表閏月為前一年的11月,=2代表閏月為前一年的12月
                er = 7; //此年非閏年
            } else {
                //若本年內有閏月
                if (runyue != mx) {
                    //但不為輸入的月份
                    er = 8; //則此輸入的月份非閏月
                } else {
                    //若輸入的月份即為閏月
                    if (dd <= nofd[mx]) {
                        //若輸入的日期不大於當月的天數
                        var jdx = sjd[mx] + dd - 1; //則將當月之前的JD值加上日期之前的天數
                    } else {
                        //日期超出範圍
                        er = 4;
                    }
                }
            }
        } else {
            //若沒有勾選閏月則
            if (runyue == 0) {
                //若旗標非閏月,則表示此年不含閏月(包括前一年的11月起之月份)
                if (dd <= nofd[mx - 1]) {
                    //若輸入的日期不大於當月的天數
                    var jdx = sjd[mx - 1] + dd - 1; //則將當月之前的JD值加上日期之前的天數
                } else {
                    //日期超出範圍
                    er = 4;
                }
            } else {
                //若旗標為本年有閏月(包括前一年的11月起之月份)
                //公式nofd(mx - (mx > runyue) - 1)的用意為:若指定月大於閏月,則索引用mx,否則索引用mx-1
                if (dd <= nofd[mx + (mx > runyue) - 1]) {
                    //若輸入的日期不大於當月的天數
                    var jdx = sjd[mx + (mx > runyue) - 1] + dd - 1; //則將當月之前的JD值加上日期之前的天數
                } else {
                    //日期超出範圍
                    er = 4;
                }
            }
        }
        if (er > 0) {
            return false;
        }
        var [yi, mi, dz] = this.Jtime(jdx);

        return [yi, mi, dz, ob];
    };
    /**
     * 將公歷時間轉換成農歷時間(古代歷法來自壽星萬年歷) [年,月,日,是否閏月,附加資料]
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-31)
     * @return false/array
     */
    this.Solar2Lunar = function (yy, mm, dd) {
        var yy = this.intval(yy);
        var mm = this.intval(mm);
        var dd = this.intval(dd);

        //驗證輸入日期的正確性,若不正確則跳離
        if (this.ValidDate(yy, mm, dd) === false) {
            return false;
        }
        var ob = {
            //返回附加資料,古代農歷要用到
            ym: "", //月建別名yue ming
            yi: 0, //正月初一定年份,所以改了月建要相應改年份,不具備唯一性僅供展示,要逆轉到公歷必須用返回中的[yi, mi, dz, ry]
            gz: "", //幹支紀年(以正月初一為界)
            days: 0, //該農歷月份有多少天
        };
        var jdx = this.Jdays(yy, mm, dd, 12, 0, 0); //求出指定年月日之JD值

        //-721年至-104年的後九月及月建問題,與朔有關,與氣無關.不同歷法交匯,導致某些農歷日期會對應到多個公歷,所以這段時期不支持逆轉到公歷.如 -221-9-1 與 -221-10-31 的農歷都是-221年十月初一
        if (jdx >= 1457698 && jdx <= 1683430) {
            //這一段來自壽星萬年歷,十九年七閏法:7個閏年均勻安插在19個年整數中,閏年的末月置為閏月
            var yi = 0; //定農歷年份
            var mi = 0; //農歷月份從1開始
            var dz = 0; //農歷日期從1開始
            var ry = false; //是否閏月,只有閏九和閏十二
            var ii = 0; //該公歷日期在第幾輪循環中
            var ns = []; //年首相關信息,NianShou
            for (var i = 0, step = 3; i <= step; i++) {
                //計算連續的正月初一,對應的農歷日期必定在此範圍內
                var jd = 0;
                var YY = yy + i - 1; //可能所在的農歷年份
                if (YY >= -220) {
                    //秦漢歷,19年7閏,年首為十月,mi=4為正月,閏年的末月置閏並取名"後九"月,1640641為歷法生效時間公歷-221.10.31
                    jd = 1640641 + Math.floor(0.866 + (YY + 220) * 12.369) * this.synmonth; //頒行歷年首
                    ns[i + 6] = "後九"; //閏月名稱
                    ns[i + 11] = 10; //表示第10個月置閏
                } else if (YY >= -479) {
                    //戰國歷,19年7閏,年首為正月,閏年的末月置閏並取名閏"十三",1546083為歷法生效時間公歷-480.12.11
                    jd = 1546083 + Math.floor(0.5 + (YY + 479) * 12.368422) * this.synmonth;
                    ns[i + 6] = "十三";
                    ns[i + 11] = 13; //表示第13個月置閏
                } else if (YY >= -722) {
                    //春秋歷,19年7閏,年首為正月,閏年的末月置閏並取名閏"十三",1457698為歷法生效時間公歷-722.12.17
                    jd = 1457698 + Math.floor(0.342 + (YY + 721) * 12.368422) * this.synmonth;
                    ns[i + 6] = "十三";
                    ns[i + 11] = 13;
                }
                if (jd < 1457698) {
                    continue;
                }
                ns[i] = this.TrueNewMoon(jd, true);
                ns[i] = Math.floor(ns[i] + 0.5); //確保統一成整數
                if (jdx > ns[i]) {
                    continue;
                }

                ii = jdx == ns[i] ? i : i - 1; //正好年初一那天
                yi = jdx == ns[i] ? YY : YY - 1;
                step = ii + 1; //多算一個年初一以確定本年有多少個月
            }
            var tjd = [];
            for (var j = 0; j < 14; j++) {
                //逐步算出朔望日,得到閏月日期等
                var jd = j == 0 ? ns[ii] : this.TrueNewMoon(tjd[j - 1] + this.synmonth + 14, true); //以jd值代入求瞬時朔望日
                jd = Math.floor(jd + 0.5); //確保統一成整數
                if (mi + dz == 0) {
                    //還沒找到過
                    if (jdx == jd) {
                        //正好是這個月初一
                        mi = j + 1;
                        dz = 1;
                    }
                    if (jdx < jd) {
                        //在上一個月
                        mi = j; //減一再加一
                        dz = jdx - tjd[j - 1] + 1;
                    }
                }
                tjd[j] = jd; //最後一個是下一年年初一的,用於計算每個月多少天
                if (jd >= ns[ii + 1]) {
                    //下一年的年初一
                    break;
                }
            }
            ob.yi = yi;
            ob.ym = this.dxy[(mi + ns[ii + 11] - 2) % 12];
            ob.days = tjd[mi] - tjd[mi - 1]; //該月多少天

            if (mi <= 12 - ns[ii + 11] + 1) {
                //正月之前算上一年
                ob.yi--;
            }
            if (tjd.length == 14) {
                //該年有閏月
                if (mi == 13) {
                    //都是最後一個月置閏
                    ry = true;
                    ob.ym = ns[ii + 6]; //非常規,可能史書上稱後九或十三
                }
            }

            ob.gz = this.gz[(((ob.yi + 4712 + 24) % 60) + 60) % 60]; //幹支紀年

            return [yi, mi, dz, ry, ob];
        }
        for (var ty = yy, flag = 0; ; ty--, flag = 1) {
            var [mc, sjd] = this.GetZQandSMandLunarMonthCode(ty);
            if (Math.floor(jdx) >= Math.floor(sjd[0] + 0.5)) {
                break;
            }
        }
        for (var i = 0; i <= 14; i++) {
            //下面的指令中加0.5是為了改為從0時算起而不從正午算起
            if (Math.floor(jdx) >= Math.floor(sjd[i] + 0.5) && Math.floor(jdx) < Math.floor(sjd[i + 1] + 0.5)) {
                var mi = i;
                break;
            }
        }
        var dz = Math.floor(jdx) - Math.floor(sjd[mi] + 0.5) + 1; //此處加1是因為每月初一從1開始而非從0開始
        var dn = Math.floor(sjd[mi + 1] + 0.5) - Math.floor(sjd[mi] + 0.5); //該月多少天

        if (mc[mi] < 2 || flag == 1) {
            var yi = yy - 1;
        } else {
            var yi = yy;
        } //因mc(mi)=0對應到前一年陰曆11月,mc(mi)=1對應到前一年陰曆12月
        //mc(mi)=2對應到本年1月,依此類推
        if ((mc[mi] - Math.floor(mc[mi])) * 2 + 1 == 1) {
            var ry = false;
        } else {
            var ry = true;
        }
        var mi = (Math.floor(mc[mi] + 10) % 12) + 1; //對應到月份

        ob.yi = yi;
        ob.days = dn;
        ob.ym = this.dxy[mi - 1]; //月建對應的默認月名稱:建子十一,建醜十二,建寅為正...

        var Dm = jdx - dz + 1; //這個月的初一儒略日
        if (Dm >= 1724360 && Dm <= 1729794) {
            //8.01.15至 23.12.02 建子為十二,其它順推.這個1724360是9.01.15,不知道是不是壽星筆誤
            ob.ym = this.dxy[mi % 12];
            if (mi == 12) {
                //臘月變成了下一年
                ob.yi++;
            }
        } else if (Dm >= 1807724 && Dm <= 1808699) {
            //237.04.12至239.12.13 建子為十二,其它順推
            ob.ym = this.dxy[mi % 12];
            if (mi == 12) {
                //臘月變成了下一年
                ob.yi++;
            }
        } else if (Dm >= 1999349 && Dm <= 1999467) {
            //761.12.02至762.03.30 建子為正月,其它順推
            ob.ym = this.dxy[(mi + 1) % 12];
            if (mi == 11 || mi == 12) {
                //正月臘月算到下一年
                ob.yi++;
            }
        } else if (Dm >= 1973067 && Dm <= 1977052) {
            //689.12.18至700.11.15 建子為正月,建寅為一月,其它不變.一整年變為: 正月,臘月,一月,二月,三月...
            if (mi == 11) {
                ob.ym = "正";
            }
            if (mi == 1) {
                ob.ym = "一";
            }
            if (mi == 11 || mi == 12) {
                //正月臘月算到下一年
                ob.yi++;
            }
        }
        if (Dm == 1729794 || Dm == 1808699) {
            ob.ym = "拾貳"; //239.12.13及23.12.02均為十二月,為避免兩個連續十二月，此處改名
        }

        ob.gz = this.gz[(((ob.yi + 4712 + 24) % 60) + 60) % 60]; //幹支紀年

        return [yi, mi, dz, ry, ob];
    };
    /**
     * 計算公歷的某天是星期幾(PHP中的date方法,此處演示儒略日歷的轉換作用) this.wkd[i]
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-31)
     * @return false/int
     */
    this.GetWeek = function (yy, mm, dd) {
        var yy = this.intval(yy);
        var mm = this.intval(mm);
        var dd = this.intval(dd);

        var spcjd = this.Jdays(yy, mm, dd, 12, 0, 0);
        if (spcjd === false) {
            return false;
        }

        return ((Math.floor(spcjd + 1) % 7) + 7) % 7; //模數(或餘數)為0代表星期日(因為西元前4713年1月1日12時為星期一).spcjd加1是因起始日為星期一
    };
    /**
     * 獲取公歷某個月有多少天
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @return number
     */
    this.GetSolarDays = function (yy, mm) {
        var yy = this.intval(yy);
        var mm = this.intval(mm);

        if (mm < 1 || mm > 12) {
            //月份超出範圍
            return 0;
        }
        if (yy == 1582 && mm == 10) {
            //這年這個月的5到14日不存在,所以1582年10月只有21天
            return 21;
        }
        var ndf1 = -(yy % 4 == 0); //可被四整除
        var ndf2 = (yy % 400 == 0) - (yy % 100 == 0) && yy > 1582;
        var ndf = ndf1 + ndf2;
        return 30 + ((Math.abs(mm - 7.5) + 0.5) % 2) - (mm == 2) * (2 + ndf);
    };
    /**
     * 獲取農歷某個月有多少天
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param bool ry 是否閏月
     * @return number
     */
    this.GetLunarDays = function (yy, mm, ry) {
        yy = this.intval(yy);
        mm = this.intval(mm);
        ry = this.boolval(ry);

        var a = this.Lunar2Solar(yy, mm, 1, ry);
        if (a == false) {
            //比如年份超出範圍或該月不是閏月
            return 0;
        }
        var ob = a[3];
        var days = ob["days"];
        return days[mm][ry ? 1 : 0];
    };
    /**
     * 獲取農歷某年的閏月,0為無閏月
     * @param int yy(-1000-3000)
     * @return number
     */
    this.GetLeap = function (yy) {
        yy = this.intval(yy);

        var a = this.Lunar2Solar(yy, 1, 1, false);
        if (a == false) {
            return 0;
        }
        var ob = a[3];
        return ob["leap"];
    };
    /**
     * 根據公歷年月日精確計算星座下標 this.cxz[xz]
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-31)
     * @param int hh(0-23)
     * @param int mt(0-59),分鐘
     * @param int ss(0-59),秒數
     * @return int|false
     */
    this.GetXZ = function (yy, mm, dd, hh, mt, ss) {
        var yy = this.intval(yy);
        var mm = this.intval(mm);
        var dd = this.intval(dd);
        var hh = hh === undefined ? 0 : this.intval(hh);
        var mt = mt === undefined ? 0 : this.intval(mt);
        var ss = ss === undefined ? 0 : this.intval(ss);

        if (this.ValidDate(yy, mm, dd) === false) {
            return false;
        }

        var spcjd = this.Jdays(yy, mm, dd, hh, mt, ss); //special jd
        if (spcjd === false) {
            return false;
        }
        for (var ty = yy; ; ty--) {
            //春分開始,以兩氣之間為單位
            var jq = this.GetAdjustedJQ(ty, false);
            if (spcjd >= jq[0]) {
                break;
            }
        }
        for (var i = 0, xz = 2; i <= 22; i += 2) {
            //默認是春分之前的那個
            if (spcjd < jq[i]) {
                var xz = (i / 2 - 1 + 3) % 12;
                break;
            } //即為指定時刻所在的節氣月首JD值
        }
        return xz;
    };
    /**
     * 四柱計算,根據this.zwz決定是否分早子時晚子時,傳公歷
     * @param int yy(-1000-3000)
     * @param int mm(1-12)
     * @param int dd(1-31)
     * @param int hh(0-23)
     * @param int mt(0-59),分鐘,在跨節的時辰上會需要,有的排盤忽略跨節
     * @param int ss(0-59),秒數
     * @return false/array(天幹, 地支, 附加資料)
     */
    this.GetGZ = function (yy, mm, dd, hh, mt, ss) {
        var yy = this.floatval(yy);
        var mm = this.floatval(mm);
        var dd = this.floatval(dd);
        var hh = this.floatval(hh);
        var mt = mt === undefined ? 0 : this.floatval(mt);
        var ss = ss === undefined ? 0 : this.floatval(ss);

        if (mt + ss == 0) {
            //避免整點模糊
            ss = 10;
        }

        if (this.ValidDate(yy, mm, dd) === false) {
            return false;
        }

        var spcjd = this.Jdays(yy, mm, dd, hh, mt, ss);
        if (spcjd === false) {
            return false;
        }

        var jr = [];
        for (var ty = yy; ; ty--) {
            //公歷年的立春在前一年春分開始的數組中
            var dj = this.GetAdjustedJQ(ty, false);
            jr = dj.concat(jr); //往前插入
            if (spcjd >= dj[21]) {
                //dj[21]為立春,約在2月5日前後,若小於dj[21],則屬於前一個節氣年
                ty++;
                break;
            }
        }

        var tg = [];
        var dz = [];
        var ygz = (((ty + 4712 + 24) % 60) + 60) % 60;
        tg[0] = ygz % 10; //年幹
        dz[0] = ygz % 12; //年支
        for (var j = 0; ; j++) {
            if (spcjd < jr[21 + 2 * j]) {
                var tm = j - 1;
                break;
            } //已超過指定時刻,故應取前一個節氣
        }

        var tmm = ((ty + 4712) * 12 + tm + 60) % 60;
        var mgz = (tmm + 50) % 60;
        tg[1] = mgz % 10; //月幹
        dz[1] = mgz % 12; //月支
        //計算日柱之幹支
        var jda = spcjd + 0.5; //加0.5是將起始點從正午改為從0點開始
        var thes = (jda - Math.floor(jda)) * 86400 + 3600; //將jd的小數部份化為秒,並加上起始點前移的一小時(3600秒),取其整數值
        var dayjd = Math.floor(jda) + thes / 86400; //將秒數化為日數,加回到jd的整數部份
        var dgz = ((Math.floor(dayjd + 49) % 60) + 60) % 60;
        tg[2] = dgz % 10; //日幹
        dz[2] = dgz % 12; //日支
        if (this.zwz && hh >= 23) {
            //區分早晚子時,日柱前移一柱
            tg[2] = (tg[2] + 10 - 1) % 10;
            dz[2] = (dz[2] + 12 - 1) % 12;
        }
        //計算時柱之幹支
        var dh = dayjd * 12;
        var hgz = ((Math.floor(dh + 48) % 60) + 60) % 60;
        tg[3] = hgz % 10; //時幹
        dz[3] = hgz % 12; //時支

        var ob = {
            ty: ty,
            jr: jr,
        };
        return [tg, dz, ob];
    };
    /**
     * 根據年幹支計算所有合法的月幹支
     * @param int ygz(0-59) 年柱幹支代碼
     * @return array 月柱幹支代碼列表
     */
    this.MGZ = function (ygz) {
        var ygz = this.intval(ygz);

        var mgz = [];

        //var ygz = this.gz.indexOf(ygz);

        var nv = 2 + 12 * (ygz % 10);
        for (var i = 0; i <= 11; i++) {
            var pv = (i + nv) % 60;
            mgz[pv] = this.gz[pv];
        }
        return mgz;
    };
    /**
     * 根據日幹支計算所有合法的時幹支
     * @param int dgz(0-59) 日柱幹支代碼
     * @return array 時柱幹支代碼列表
     */
    this.HGZ = function (dgz) {
        var dgz = this.intval(dgz);

        var hgz = [];

        //var dgz = this.gz.indexOf(dgz);

        var nv = 12 * (dgz % 10);
        for (var i = 0; i <= (this.zwz ? 12 : 11); i++) {
            //考慮晚子時
            var pv = (i + nv) % 60;
            hgz[pv] = this.gz[pv] + (i == 12 ? "+" : ""); //+號在查找方法中要用到
        }
        return hgz;
    };
    /**
     * 根據一柱天幹地支代碼計算該柱的六十甲子代碼
     * @param int tg(0-9) 天幹代碼
     * @param int dz(0-11) 地支代碼
     * @return false/int 幹支代碼
     */
    this.GZ = function (tg, dz) {
        var tg = this.intval(tg);
        var dz = this.intval(dz);

        if (tg < 0 || tg > 9) {
            return false;
        }

        if (dz < 0 || dz > 11) {
            return false;
        }

        if (tg % 2 != dz % 2) {
            //偶數對偶數,奇數對奇數才能組成一柱
            return false;
        }
        return (((10 + tg - dz) % 10) / 2) * 12 + dz;
    };
    /**
     * 根據八字幹支查找對應的公歷日期(GanZhi To GongLi)
     * @param int ygz(0-59) 對應的是this.gz
     * @param int mgz(0-59)
     * @param int dgz(0-59)
     * @param int hgz(0-59)
     * @param int yeai(-1000-3000) 起始年 year initial
     * @param int mx 查找多少個甲子
     */
    this.gz2gl = function (ygz, mgz, dgz, hgz, yeai, mx) {
        var ygz = this.intval(ygz);
        var mgz = this.intval(mgz);
        var dgz = this.intval(dgz);
        var hgz = this.intval(hgz);
        var yeai = this.intval(yeai);
        var mx = this.intval(mx);

        if (ygz < 0 || ygz >= 60) {
            //年幹支非六十甲子
            return false;
        }
        if (mgz < 0 || mgz >= 60) {
            //月幹支非六十甲子
            return false;
        }
        if (dgz < 0 || dgz >= 60) {
            //日幹支非六十甲子
            return false;
        }
        if (hgz < 0 || hgz >= 60) {
            //時幹支非六十甲子
            return false;
        }

        if (!(mgz in this.MGZ(ygz))) {
            //對應的月幹支不存在
            return false;
        }
        if (!(hgz in this.HGZ(dgz))) {
            //對應的時幹支不存在
            return false;
        }
        var hgzs = this.HGZ(dgz); //該日下所有時柱
        if (this.zwz && hgzs[hgz].substr(-1) == "+") {
            //晚子時,日柱後挪一天
            dgz = (dgz + 1) % 60;
        }
        var yeaf = yeai + mx * 60;

        var ifs = []; //initial-final 返回一個含起止時間的數組

        for (var m = 0; m <= mx - 1; m++) {
            var yea = yeai + m * 60;

            //將年月幹支對應到指定年的節氣月起始時刻
            var syc = (yea + 56) % 60; //已知公元0年為庚申年,庚申的六十甲子代碼為56,這里求得yea的六十甲子代碼syc
            var asyc = (ygz + 60 - syc) % 60; //年幹支代碼相對yea幹支代碼偏移了多少
            var iy = yea + asyc; //加上偏移即得一個ygz年

            var mgzo = (mgz + 60 - 2) % 12; //已知幹支代碼,要求幹支名,只需將幹支代碼除以10,所得的餘數即為天幹的代碼;將幹支代碼除以12,所得的餘數即為地支的代碼.這里求得mgz在第幾個月

            var jdpjq = [];
            for (var ty = iy - 1; ty <= iy; ty++) {
                //前一年春分開始的節氣
                var dj = this.GetAdjustedJQ(ty, false);
                jdpjq = jdpjq.concat(dj);
            }
            var ijd = jdpjq[21 + 2 * mgzo]; //節氣月頭JD initial jd 21立春
            var fjd = jdpjq[21 + 2 * mgzo + 2]; //節氣月尾JD final jd

            var sdc = (Math.floor(ijd) + 49) % 60; //節氣月頭的日幹支代碼,儒略日歷時間0日為癸醜日,六十甲子代碼為49
            var asdc = (dgz + 60 - sdc) % 60; //生日相對於節氣月頭的日數
            var idd = Math.floor(ijd + asdc); //生日JD值(未加上時辰)
            var ihh = hgz % 12; //時辰代碼
            var id = idd + (ihh * 2 - 13) / 24;
            var fd = idd + (ihh * 2 - 11) / 24;

            if (fd < ijd || id > fjd) {
                //此八字在此60年中不存在
            } else {
                if (id > ijd && fd < fjd) {
                    //沒有跨節
                    var ids = id;
                    var fds = fd;
                }
                if (id < ijd && fd > ijd) {
                    //同一個時辰跨越了節:在節氣月頭,只包含時辰後段
                    var ids = ijd;
                    var fds = fd;
                }
                if (id < fjd && fd > fjd) {
                    //同一個時辰跨越了節:在節氣月尾,只包含時辰前段
                    var ids = id;
                    var fds = fjd;
                }
                ifs.push([this.Jtime(ids), this.Jtime(fds)]); //儒略日歷時間轉成公歷時間.如果開啟早晚子並且是子時這里有點瑕疵,但考慮到跨節這里有點覆雜
            }
        }
        return ifs;
    };
    /**
     * 根據公歷年月日計算命盤信息 fate:命運 map:圖示
     * @param int xb 性別0男1女
     * @param int yy 年份(-1000-3000).確保傳的是this.J對應的時間
     * @param int mm 月份(1-12)
     * @param int dd 日期(1-31)
     * @param int hh 時間(0-23)
     * @param int mt 分鐘(0-59),在跨節的時辰上會需要,有的排盤忽略了跨節,不需要考慮跨節則請把時間置為對應時辰的初始值
     * @param int ss 秒數(0-59),在跨節的時辰上會需要,有的排盤忽略了跨節
     * @param float J 所在經度(角度表示)用於計算真太陽時,不傳則用標準時間排盤
     * @param float W 所在緯度(角度表示)不傳則默認北緯35度
     * @return false/array
     */
    this.fatemaps = function (xb, yy, mm, dd, hh, mt, ss, J, W) {
        var xb = this.intval(xb) ? 1 : 0; //確保準確
        var yy = this.intval(yy);
        var mm = this.intval(mm);
        var dd = this.intval(dd);
        var hh = this.intval(hh);
        var mt = mt === undefined ? 0 : this.intval(mt);
        var ss = ss === undefined ? 0 : this.intval(ss);

        var spcjd = this.Jdays(yy, mm, dd, hh, mt, ss); //special jd,這里依然是標準時間,即this.J處的平太陽時
        if (spcjd === false) {
            return false;
        }

        var rt = []; //要返回的數組 return

        if (J !== undefined) {
            //有傳參,需要轉地方真太陽時
            rt["pty"] = spcjd - ((this.J - this.floatval(J)) * 4) / 60 / 24; //計算地方平太陽時,每經度時差4分鐘
            rt["pty"] = this.Jtime(rt["pty"]); //地方平太陽時

            spcjd = this.zty(spcjd, J, W); //采用真太陽時排盤,這里有點疑問: 對應的廿四節氣的計算是否也要轉為真太陽時呢?
            rt["zty"] = this.Jtime(spcjd); //地方真太陽時
        }

        var [yy, mm, dd, hh, mt, ss] = this.Jtime(spcjd); //假設hh傳了>24的數字,此處修正

        var nwx = [0, 0, 0, 0, 0]; //五行數量 number of WuXing 這里不計算藏幹里的
        var nyy = [0, 0]; //陰陽數量 number of YinYang 這里不計算藏幹里的

        var szs = [1, 6, 10, 9, 10, 9, 7, 0, 4, 3]; //日幹對地支爲"子"者所對應的運程代碼

        var [tg, dz, ob] = this.GetGZ(yy, mm, dd, hh, mt, ss);

        //計算年月日時辰等四柱幹支的陰陽屬性和個數及五行屬性和個數
        var yytg = []; //YinYang TianGan
        var yydz = []; //YinYang DiZhi
        var ewxtg = []; //各天幹對應的五行
        var ewxdz = []; //各地支對應的五行
        for (var k = 0; k <= 3; k++) {
            //yytg:八字各柱天幹之陰陽屬性,yydz:八字各柱地支之陰陽屬性,nyy[0]為陽之總數,nyy[1]為陰之總數
            yytg[k] = tg[k] % 2;
            nyy[yytg[k]] = nyy[yytg[k]] + 1; //求天幹的陰陽並計算陰陽總數

            yydz[k] = dz[k] % 2;
            nyy[yydz[k]] = nyy[yydz[k]] + 1; //求地支的陰陽並計算陰陽總數

            ewxtg[k] = this.wxtg[tg[k]];
            nwx[ewxtg[k]] = nwx[ewxtg[k]] + 1; //wxtg為天幹之五行屬性

            ewxdz[k] = this.wxdz[dz[k]];
            nwx[ewxdz[k]] = nwx[ewxdz[k]] + 1; //wxdz為地支之五行屬性
        }

        rt["nyy"] = nyy; //陰陽數量
        rt["nwx"] = nwx; //五行數量

        rt["yytg"] = yytg; //各天幹對應的陰陽
        rt["yydz"] = yydz; //各地支對應的陰陽

        rt["ewxtg"] = ewxtg; //各天幹對應的五行
        rt["ewxdz"] = ewxdz; //各地支對應的五行

        //日主與地支藏幹決定十神
        var bzcg = []; //各地支的藏幹
        var wxcg = []; //各地支的藏幹對應的五行
        var yycg = []; //各地支的藏幹對應的陰陽
        var bctg = []; //各地支的藏幹對應的文字
        for (var i = 0; i <= 3; i++) {
            //0,1,2,3等四個
            wxcg[i] = [];
            yycg[i] = [];
            for (var j = 0; j <= 2; j++) {
                //0,1,2等三個
                var nzcg = this.zcg[dz[i]][j]; //取得藏幹表中的藏幹代碼,zcg為一 4X3 之array the number of 支藏幹
                if (nzcg >= 0) {
                    //若存在則取出(若為-1,則代表空白)
                    bctg[3 * i + j] = this.ctg[nzcg]; //暫存其幹支文字
                    bzcg[3 * i + j] = this.sss[this.dgs[nzcg][tg[2]]]; //暫存其所對應之十神文字

                    wxcg[i][j] = this.wxtg[nzcg]; //其五行屬性
                    yycg[i][j] = nzcg % 2; //其陰陽屬性
                } else {
                    bctg[3 * i + j] = ""; //若nzcg為-1,則代表空白,設定藏幹文字變數為空白
                    bzcg[3 * i + j] = ""; //若nzcg為-1,則代表空白,設定十神文字變數為空白
                }
            }
        }
        rt["bctg"] = bctg;
        rt["bzcg"] = bzcg;
        rt["wxcg"] = wxcg;
        rt["yycg"] = yycg;

        //求算起運時刻
        for (var i = 0; ; i++) {
            //先找到指定時刻前後的節氣月首
            if (spcjd < ob.jr[21 + 2 * i]) {
                var ord = i - 1;
                break;
            } //ord即為指定時刻所在的節氣月首JD值
        }

        var ta = this.pdy ? this.ty : 360; //一個廻歸年的天數

        var xf = spcjd - ob.jr[21 + 2 * ord]; //xf代表節氣月的前段長,單位為日,以指定時刻為分界點
        var yf = ob.jr[21 + 2 * ord + 2] - spcjd; //yf代表節氣月的後段長
        if ((xb == 0 && yytg[0] == 0) || (xb == 1 && yytg[0] == 1)) {
            if (this.pdy) {
                var zf = ta * 10 * (yf / (yf + xf)); //zf為指定日開始到起運日之間的總日數(精確法)
            } else {
                var zf = ta * 10 * (yf / 30); //zf為指定日開始到起運日之間的總日數(粗略法）三天折合一年,一天折合四個月,一個時辰折合十天,一個小時折合五天,反推得到一年按360天算,一個月按30天算
            }
            var forward = 0; //陽年男或陰年女,其大運是順推的
        } else {
            if (this.pdy) {
                var zf = ta * 10 * (xf / (yf + xf)); //陰年男或陽年女,其大運是逆推的
            } else {
                var zf = ta * 10 * (xf / 30); //(粗略法)
            }
            var forward = 1;
        }
        var y = this.intval(zf / ta);
        var m = this.intval((zf % ta) / (ta / 12));
        var d = this.intval((zf % ta) % (ta / 12));

        rt["qyy_desc"] = "出生後" + y + "年" + m + "個月" + d + "天起運"; //與十三行八字一致

        var qyt = spcjd + (y + m / 12 + d / this.ty) * this.ty; //轉按回歸年算
        var jt = this.Jtime(qyt); //將起運時刻的JD值轉換為年月日時分秒
        var qyy = jt[0]; //起運年(公歷)

        rt["qyy"] = qyy; //起運年

        //求算起運年(指節氣年,農歷)
        var qjr = this.GetAdjustedJQ(qyy - 1, false); //立春在上一年的以春分開始的數組中
        if (qyt >= qjr[21]) {
            //qjr[21]為立春,約在2月5日前後,
            var jqyy = qyy;
        } else {
            var jqyy = qyy - 1; //若小於jr[21],則屬於前一個節氣年
        }

        //求算起運年及其後第五年的年幹支及起運歲
        var jtd = (((jqyy + 4712 + 24) % 10) + 10) % 10;
        jtd = this.ctg[(((jqyy + 4712 + 24) % 10) + 10) % 10] + "、" + this.ctg[(((jqyy + 4712 + 24 + 5) % 10) + 10) % 10];
        rt["qyy_desc2"] = "每逢 " + jtd + " 年" + jt[1] + "月" + jt[2] + "日" + jt[3] + "時交脫大運"; //顯示每十年為一階段之起運時刻,分兩個五年以年天幹和陽曆日期表示
        var qage = jqyy - ob.ty; //起運年減去出生年再加一即為起運之歲數,從懷胎算起,出生即算一歲

        rt["dy"] = []; //大運

        //下面的回圈計算起迄歲,大運幹支(及其對應的十神),衰旺吉凶
        var zqage = []; //起始歲數
        var zboz = []; //末端歲數
        var zfman = []; //大運月幹代碼
        var zfmbn = []; //大運月支代碼
        var zfma = []; //大運月幹文字
        var zfmb = []; //大運月支文字
        var nzs = []; //大運對應的十二長生
        var mgz = (((10 + tg[1] - dz[1]) % 10) / 2) * 12 + dz[1]; //這里是根據天幹地支代碼計算月柱的六十甲子代碼
        for (var k = 0; k <= 8; k++) {
            //求各階段的起迄歲數及該階段的大運
            if (rt["dy"][k] === undefined) {
                rt["dy"][k] = [];
            }
            //求起迄歲
            rt["dy"][k]["zqage"] = zqage[k] = qage + 1 + k * 10; //求各階段的起始歲數
            rt["dy"][k]["zboz"] = zboz[k] = qage + 1 + k * 10 + 9; //求各階段的末端歲數

            //求起訖年
            rt["dy"][k]["syear"] = qyy + k * 10;
            rt["dy"][k]["eyear"] = qyy + k * 10 + 9;

            //排大運
            //求大運的數值表示值,以出生月份的次月幹支開始順排或以出生月份的前一個月幹支開始逆排
            //大運月幹
            rt["dy"][k]["zfman"] = zfman[k] = (mgz + 60 + Math.pow(-1, forward) * (k + 1)) % 10; //加60是為保證在Mod之前必為正數
            //大運月支
            rt["dy"][k]["zfmbn"] = zfmbn[k] = (mgz + 60 + Math.pow(-1, forward) * (k + 1)) % 12; //加60是為保證在Mod之前必為正數

            rt["dy"][k]["zfma"] = zfma[k] = this.ctg[zfman[k]];
            rt["dy"][k]["zfmb"] = zfmb[k] = this.cdz[zfmbn[k]];

            //算衰旺吉凶ncs
            //szs(tg(2))爲日幹對大運地支爲"子"者所對應之運程代碼
            //tg(2)爲生日天幹(以整數0~11表示)之代碼
            //(-1)^tg(2)表示若日幹爲陽則取加號,若日幹爲陰則取減號
            //第一個大運之地支數值爲zfmbn(0)
            //下式中szs(tg(2)) + (-1) ^ tg(2) * (zfmbn(0))為決定起始運勢,(-1) ^ forward * (-1) ^ tg(2) 為決定順推或逆推,可合併簡化為次一式
            rt["dy"][k]["nzs"] = nzs[k] = (24 + szs[tg[2]] + Math.pow(-1, tg[2]) * (zfmbn[0] + Math.pow(-1, forward) * k)) % 12;
            rt["dy"][k]["nzsc"] = this.czs[nzs[k]];
            //此處加24是爲了使Mod之前總值不爲負值
        }

        //求流年的數值表示值及對應的文字
        var lyean = []; //流年天幹
        var lyebn = []; //流年地支
        var lye = []; //流年所對應的幹支文字
        for (var j = 0; j <= 89; j++) {
            var k = this.intval(j / 10); //大運
            var i = j % 10; //流年
            if (rt["dy"][k]["ly"] === undefined) {
                //大運對應的流年
                rt["dy"][k]["ly"] = [];
            }
            if (rt["dy"][k]["ly"][i] === undefined) {
                rt["dy"][k]["ly"][i] = [];
            }
            //lyean[j]=(ygz + j + qage) % 10;
            rt["dy"][k]["ly"][i]["age"] = j + qage + 1; //年齡(虛歲)
            rt["dy"][k]["ly"][i]["year"] = j + qage + ob.ty; //流年(農歷)
            rt["dy"][k]["ly"][i]["lyean"] = lyean[j] = (tg[0] + j + qage) % 10; //流年天幹
            rt["dy"][k]["ly"][i]["lyebn"] = lyebn[j] = (dz[0] + j + qage) % 12; //流年地支
            rt["dy"][k]["ly"][i]["lye"] = lye[j] = this.ctg[lyean[j]] + this.cdz[lyebn[j]]; //取流年所對應的幹支文字
        }

        var xz = this.GetXZ(yy, mm, dd, hh, mt, ss);

        rt["mz"] = this.mz[xb]; //命造乾坤
        rt["xb"] = this.xb[xb]; //性別0男1女
        rt["gl"] = [yy, mm, dd]; //公歷生日
        rt["nl"] = this.Solar2Lunar(yy, mm, dd); //農歷生日
        rt["tg"] = tg; //八字天幹數組
        rt["dz"] = dz; //八字地支數組
        rt["sz"] = []; //四柱字符
        rt["ctg"] = []; //天幹字符
        rt["cdz"] = []; //地支字符
        for (var i = 0; i <= 3; i++) {
            rt["sz"][i] = this.ctg[tg[i]] + this.cdz[dz[i]];
            rt["ctg"][i] = this.ctg[tg[i]];
            rt["cdz"][i] = this.cdz[dz[i]];
        }
        rt["sx"] = this.csx[dz[0]]; //生肖,與年地支對應
        rt["xz"] = this.cxz[xz]; //星座
        rt["cyy"] = this.cyy[yytg[2]]; //日幹陰陽

        return rt;
    };
}
